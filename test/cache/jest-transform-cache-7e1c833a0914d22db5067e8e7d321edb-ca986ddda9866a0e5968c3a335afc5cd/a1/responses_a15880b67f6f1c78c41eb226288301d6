e6553f2f1934ab10182798ef61a6b015
"use strict";

/* istanbul ignore next */
function cov_tdthvif90() {
  var path = "/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts";
  var hash = "a7f0f73327ee41fecd210e50ebdef40e42f220d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 363
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 106
        }
      },
      "5": {
        start: {
          line: 16,
          column: 40
        },
        end: {
          line: 16,
          column: 106
        }
      },
      "6": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "7": {
        start: {
          line: 22,
          column: 18
        },
        end: {
          line: 22,
          column: 128
        }
      },
      "8": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 22,
          column: 128
        }
      },
      "9": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 30
        }
      },
      "10": {
        start: {
          line: 28,
          column: 19
        },
        end: {
          line: 28,
          column: 129
        }
      },
      "11": {
        start: {
          line: 28,
          column: 32
        },
        end: {
          line: 28,
          column: 129
        }
      },
      "12": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "13": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 128
        }
      },
      "14": {
        start: {
          line: 34,
          column: 38
        },
        end: {
          line: 34,
          column: 128
        }
      },
      "15": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "16": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 115
        }
      },
      "17": {
        start: {
          line: 40,
          column: 34
        },
        end: {
          line: 40,
          column: 115
        }
      },
      "18": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 36
        }
      },
      "19": {
        start: {
          line: 46,
          column: 25
        },
        end: {
          line: 46,
          column: 116
        }
      },
      "20": {
        start: {
          line: 46,
          column: 38
        },
        end: {
          line: 46,
          column: 116
        }
      },
      "21": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 44
        }
      },
      "22": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 143
        }
      },
      "23": {
        start: {
          line: 52,
          column: 35
        },
        end: {
          line: 52,
          column: 143
        }
      },
      "24": {
        start: {
          line: 53,
          column: 0
        },
        end: {
          line: 53,
          column: 38
        }
      },
      "25": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 127
        }
      },
      "26": {
        start: {
          line: 58,
          column: 42
        },
        end: {
          line: 58,
          column: 127
        }
      },
      "27": {
        start: {
          line: 59,
          column: 0
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "28": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 125
        }
      },
      "29": {
        start: {
          line: 64,
          column: 38
        },
        end: {
          line: 64,
          column: 125
        }
      },
      "30": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 65,
          column: 44
        }
      },
      "31": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 104
        }
      },
      "32": {
        start: {
          line: 70,
          column: 39
        },
        end: {
          line: 70,
          column: 104
        }
      },
      "33": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 46
        }
      },
      "34": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 183
        }
      },
      "35": {
        start: {
          line: 76,
          column: 37
        },
        end: {
          line: 76,
          column: 183
        }
      },
      "36": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 77,
          column: 42
        }
      },
      "37": {
        start: {
          line: 82,
          column: 21
        },
        end: {
          line: 82,
          column: 140
        }
      },
      "38": {
        start: {
          line: 82,
          column: 34
        },
        end: {
          line: 82,
          column: 140
        }
      },
      "39": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 83,
          column: 36
        }
      },
      "40": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 146
        }
      },
      "41": {
        start: {
          line: 88,
          column: 37
        },
        end: {
          line: 88,
          column: 146
        }
      },
      "42": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 89,
          column: 42
        }
      },
      "43": {
        start: {
          line: 95,
          column: 22
        },
        end: {
          line: 95,
          column: 114
        }
      },
      "44": {
        start: {
          line: 95,
          column: 35
        },
        end: {
          line: 95,
          column: 114
        }
      },
      "45": {
        start: {
          line: 96,
          column: 0
        },
        end: {
          line: 96,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "generic",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 27
          },
          end: {
            line: 16,
            column: 28
          }
        },
        loc: {
          start: {
            line: 16,
            column: 40
          },
          end: {
            line: 16,
            column: 106
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 19
          }
        },
        loc: {
          start: {
            line: 22,
            column: 31
          },
          end: {
            line: 22,
            column: 128
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 20
          }
        },
        loc: {
          start: {
            line: 28,
            column: 32
          },
          end: {
            line: 28,
            column: 129
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 25
          },
          end: {
            line: 34,
            column: 26
          }
        },
        loc: {
          start: {
            line: 34,
            column: 38
          },
          end: {
            line: 34,
            column: 128
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 22
          }
        },
        loc: {
          start: {
            line: 40,
            column: 34
          },
          end: {
            line: 40,
            column: 115
          }
        },
        line: 40
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 46,
            column: 25
          },
          end: {
            line: 46,
            column: 26
          }
        },
        loc: {
          start: {
            line: 46,
            column: 38
          },
          end: {
            line: 46,
            column: 116
          }
        },
        line: 46
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 52,
            column: 22
          },
          end: {
            line: 52,
            column: 23
          }
        },
        loc: {
          start: {
            line: 52,
            column: 35
          },
          end: {
            line: 52,
            column: 143
          }
        },
        line: 52
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 30
          }
        },
        loc: {
          start: {
            line: 58,
            column: 42
          },
          end: {
            line: 58,
            column: 127
          }
        },
        line: 58
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 26
          }
        },
        loc: {
          start: {
            line: 64,
            column: 38
          },
          end: {
            line: 64,
            column: 125
          }
        },
        line: 64
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 27
          }
        },
        loc: {
          start: {
            line: 70,
            column: 39
          },
          end: {
            line: 70,
            column: 104
          }
        },
        line: 70
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 76,
            column: 25
          }
        },
        loc: {
          start: {
            line: 76,
            column: 37
          },
          end: {
            line: 76,
            column: 183
          }
        },
        line: 76
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 82,
            column: 22
          }
        },
        loc: {
          start: {
            line: 82,
            column: 34
          },
          end: {
            line: 82,
            column: 140
          }
        },
        line: 82
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 88,
            column: 25
          }
        },
        loc: {
          start: {
            line: 88,
            column: 37
          },
          end: {
            line: 88,
            column: 146
          }
        },
        line: 88
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 95,
            column: 22
          },
          end: {
            line: 95,
            column: 23
          }
        },
        loc: {
          start: {
            line: 95,
            column: 35
          },
          end: {
            line: 95,
            column: 114
          }
        },
        line: 95
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 7,
            column: 14
          },
          end: {
            line: 7,
            column: 55
          }
        }, {
          start: {
            line: 7,
            column: 59
          },
          end: {
            line: 7,
            column: 68
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 76,
            column: 90
          },
          end: {
            line: 76,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 125
          },
          end: {
            line: 76,
            column: 137
          }
        }, {
          start: {
            line: 76,
            column: 140
          },
          end: {
            line: 76,
            column: 166
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts",
      mappings: ";;;AAGA,6CAAuD;AAEvD,SAAS,OAAO,CACf,GAAgC,EAChC,IAA6B,EAC7B,IAAmC;IAEnC,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;QAClB,IAAI,EAAE,yBAAW,CAAC,OAAO,EAAE,EAAE,IAAI,IAAI,SAAS;QAC9C,IAAI;KACJ,CAAC,CAAC;AACJ,CAAC;AAYD,gBAAgB;AAChB;;;GAGG;AACI,MAAM,kBAAkB,GAAG,CAAC,OAAiB,EAAU,EAAE,CAC/D,OAAO,CAAC,uCAAuC,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADvD,QAAA,kBAAkB,sBACqC;AAEpE;;;GAGG;AACI,MAAM,SAAS,GAAG,CAAI,OAAmD,EAAU,EAAE,CAC3F,OAAO,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADtF,QAAA,SAAS,aAC6E;AAEnG;;;GAGG;AACI,MAAM,UAAU,GAAG,CAAI,OAAmD,EAAU,EAAE,CAC5F,OAAO,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADtF,QAAA,UAAU,cAC4E;AAEnG;;;GAGG;AACI,MAAM,gBAAgB,GAAG,CAAI,OAAyB,EAAU,EAAE,CACxE,OAAO,CAAC,sCAAsC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAD/E,QAAA,gBAAgB,oBAC+D;AAE5F;;;GAGG;AACI,MAAM,YAAY,GAAG,CAAC,OAAoC,EAAU,EAAE,CAC5E,OAAO,CAAC,gCAAgC,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADtE,QAAA,YAAY,gBAC0D;AAEnF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,CAAC,OAAqC,EAAU,EAAE,CACjF,OAAO,CAAC,6BAA6B,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADnE,QAAA,gBAAgB,oBACmD;AAEhF;;;GAGG;AACI,MAAM,aAAa,GAAG,CAAI,OAA6C,EAAU,EAAE,CACzF,OAAO,CAAC,kCAAkC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADjG,QAAA,aAAa,iBACoF;AAE9G;;;GAGG;AACI,MAAM,oBAAoB,GAAG,CAAI,OAAyB,EAAU,EAAE,CAC5E,OAAO,CAAC,iCAAiC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAD1E,QAAA,oBAAoB,wBACsD;AAEvF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,CAAI,OAAyB,EAAU,EAAE,CACxE,OAAO,CAAC,mCAAmC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAD5E,QAAA,gBAAgB,oBAC4D;AAEzF;;;GAGG;AACI,MAAM,iBAAiB,GAAG,CAAC,OAAiB,EAAU,EAAE,CAC9D,OAAO,CAAC,sCAAsC,EAAE,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADtD,QAAA,iBAAiB,qBACqC;AAEnE;;;GAGG;AACI,MAAM,eAAe,GAAG,CAAC,OAA2C,EAAU,EAAE,CACtF,OAAO,CACN,mCAAmC,EACnC,EAAE,IAAI,EAAE,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EACtF,OAAO,CAAC,IAAI,CACZ,CAAC;AALU,QAAA,eAAe,mBAKzB;AAEH;;;GAGG;AACI,MAAM,YAAY,GAAG,CAAI,OAA8C,EAAU,EAAE,CACzF,OAAO,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAD/F,QAAA,YAAY,gBACmF;AAE5G;;;GAGG;AACI,MAAM,eAAe,GAAG,CAAI,OAA8C,EAAU,EAAE,CAC5F,OAAO,CAAC,mCAAmC,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADlG,QAAA,eAAe,mBACmF;AAE/G,iBAAiB;AACjB;;;GAGG;AACI,MAAM,aAAa,GAAG,CAAI,OAAyB,EAAU,EAAE,CACrE,OAAO,CAAC,2BAA2B,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AADpE,QAAA,aAAa,iBACuD",
      names: [],
      sources: ["/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts"],
      sourcesContent: ["import type { Class, Email, I18nTranslations } from '@types';\n\nimport { PathImpl2 } from '@nestjs/config';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\nfunction generic(\n\tkey: PathImpl2<I18nTranslations>,\n\targs: Record<string, unknown>,\n\ti18n: I18nService<I18nTranslations>,\n): string {\n\treturn i18n.t(key, {\n\t\tlang: I18nContext.current()?.lang ?? undefined, // undefined -> fallback language\n\t\targs,\n\t});\n}\n\ninterface Response {\n\t/** The i18n Service used to translate the response */\n\ti18n: I18nService<I18nTranslations>;\n}\n\ninterface NamedResponse<T> extends Response {\n\t/** The object concerned by the translation */\n\ttype: Class<T>;\n}\n\n///* ERRORS *///\n/**\n * Get the translated error for an invalid payload\n * @returns {string} The translated error\n */\nexport const authInvalidPayload = (options: Response): string =>\n\tgeneric('responses.errors.auth.invalid_payload', {}, options.i18n);\n\n/**\n * Get the translated error for an invalid ID\n * @returns {string} The translated error\n */\nexport const idInvalid = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a not found ID\n * @returns {string} The translated error\n */\nexport const idNotFound = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a missing ID\n * @returns {string} The translated error\n */\nexport const idOrEmailMissing = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.id_or_email.missing', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email\n * @returns {string} The translated error\n */\nexport const emailInvalid = (options: Response & { email: Email }): string =>\n\tgeneric('responses.errors.email.invalid', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already used email\n * @returns {string} The translated error\n */\nexport const emailAlreadyUsed = (options: Response & { email: string }): string =>\n\tgeneric('responses.errors.email.used', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for a not found email\n * @returns {string} The translated error\n */\nexport const emailNotFound = <T>(options: NamedResponse<T> & { email: string }): string =>\n\tgeneric('responses.errors.email.not_found', { type: options.type.name, email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already verified email\n * @returns {string} The translated error\n */\nexport const emailAlreadyVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.verified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an unverified email\n * @returns {string} The translated error\n */\nexport const emailNotVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.unverified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email token\n * @returns {string} The translated error\n */\nexport const emailInvalidToken = (options: Response): string =>\n\tgeneric('responses.errors.email.token.invalid', {}, options.i18n);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const birthdayInvalid = (options: Response & { date: Date | string }): string =>\n\tgeneric(\n\t\t'responses.errors.birthday.invalid',\n\t\t{ date: typeof options.date === 'string' ? options.date : options.date.toISOString() },\n\t\toptions.i18n,\n\t);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const fieldMissing = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.missing', { type: options.type.name, field: options.field }, options.i18n);\n\n/**\n * Get the translated error for an unexpected field\n * @returns {string} The translated error\n */\nexport const fieldUnexpected = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.unexpected', { type: options.type.name, field: options.field }, options.i18n);\n\n///* SUCCESS *///\n/**\n * Translate the success message for a delete operation\n * @returns {string} The translated success message\n */\nexport const deleteSuccess = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.success.deleted', { type: options.type.name }, options.i18n);\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a7f0f73327ee41fecd210e50ebdef40e42f220d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_tdthvif90 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_tdthvif90();
cov_tdthvif90().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_tdthvif90().s[1]++;
exports.deleteSuccess = exports.fieldUnexpected = exports.fieldMissing = exports.birthdayInvalid = exports.emailInvalidToken = exports.emailNotVerified = exports.emailAlreadyVerified = exports.emailNotFound = exports.emailAlreadyUsed = exports.emailInvalid = exports.idOrEmailMissing = exports.idNotFound = exports.idInvalid = exports.authInvalidPayload = void 0;
const nestjs_i18n_1 =
/* istanbul ignore next */
(cov_tdthvif90().s[2]++, require("nestjs-i18n"));
function generic(key, args, i18n) {
  /* istanbul ignore next */
  cov_tdthvif90().f[0]++;
  cov_tdthvif90().s[3]++;
  return i18n.t(key, {
    lang:
    /* istanbul ignore next */
    (cov_tdthvif90().b[0][0]++, nestjs_i18n_1.I18nContext.current()?.lang) ??
    /* istanbul ignore next */
    (cov_tdthvif90().b[0][1]++, undefined),
    args
  });
}
///* ERRORS *///
/**
 * Get the translated error for an invalid payload
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[4]++;
const authInvalidPayload = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[1]++;
  cov_tdthvif90().s[5]++;
  return generic('responses.errors.auth.invalid_payload', {}, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[6]++;
exports.authInvalidPayload = authInvalidPayload;
/**
 * Get the translated error for an invalid ID
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[7]++;
const idInvalid = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[2]++;
  cov_tdthvif90().s[8]++;
  return generic('responses.errors.id.invalid', {
    type: options.type.name,
    id: options.id
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[9]++;
exports.idInvalid = idInvalid;
/**
 * Get the translated error for a not found ID
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[10]++;
const idNotFound = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[3]++;
  cov_tdthvif90().s[11]++;
  return generic('responses.errors.id.invalid', {
    type: options.type.name,
    id: options.id
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[12]++;
exports.idNotFound = idNotFound;
/**
 * Get the translated error for a missing ID
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[13]++;
const idOrEmailMissing = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[4]++;
  cov_tdthvif90().s[14]++;
  return generic('responses.errors.id_or_email.missing', {
    type: options.type.name
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[15]++;
exports.idOrEmailMissing = idOrEmailMissing;
/**
 * Get the translated error for an invalid email
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[16]++;
const emailInvalid = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[5]++;
  cov_tdthvif90().s[17]++;
  return generic('responses.errors.email.invalid', {
    email: options.email
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[18]++;
exports.emailInvalid = emailInvalid;
/**
 * Get the translated error for an already used email
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[19]++;
const emailAlreadyUsed = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[6]++;
  cov_tdthvif90().s[20]++;
  return generic('responses.errors.email.used', {
    email: options.email
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[21]++;
exports.emailAlreadyUsed = emailAlreadyUsed;
/**
 * Get the translated error for a not found email
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[22]++;
const emailNotFound = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[7]++;
  cov_tdthvif90().s[23]++;
  return generic('responses.errors.email.not_found', {
    type: options.type.name,
    email: options.email
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[24]++;
exports.emailNotFound = emailNotFound;
/**
 * Get the translated error for an already verified email
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[25]++;
const emailAlreadyVerified = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[8]++;
  cov_tdthvif90().s[26]++;
  return generic('responses.errors.email.verified', {
    type: options.type.name
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[27]++;
exports.emailAlreadyVerified = emailAlreadyVerified;
/**
 * Get the translated error for an unverified email
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[28]++;
const emailNotVerified = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[9]++;
  cov_tdthvif90().s[29]++;
  return generic('responses.errors.email.unverified', {
    type: options.type.name
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[30]++;
exports.emailNotVerified = emailNotVerified;
/**
 * Get the translated error for an invalid email token
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[31]++;
const emailInvalidToken = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[10]++;
  cov_tdthvif90().s[32]++;
  return generic('responses.errors.email.token.invalid', {}, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[33]++;
exports.emailInvalidToken = emailInvalidToken;
/**
 * Get the translated error for an expired email token
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[34]++;
const birthdayInvalid = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[11]++;
  cov_tdthvif90().s[35]++;
  return generic('responses.errors.birthday.invalid', {
    date: typeof options.date === 'string' ?
    /* istanbul ignore next */
    (cov_tdthvif90().b[1][0]++, options.date) :
    /* istanbul ignore next */
    (cov_tdthvif90().b[1][1]++, options.date.toISOString())
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[36]++;
exports.birthdayInvalid = birthdayInvalid;
/**
 * Get the translated error for an expired email token
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[37]++;
const fieldMissing = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[12]++;
  cov_tdthvif90().s[38]++;
  return generic('responses.errors.field.missing', {
    type: options.type.name,
    field: options.field
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[39]++;
exports.fieldMissing = fieldMissing;
/**
 * Get the translated error for an unexpected field
 * @returns {string} The translated error
 */
/* istanbul ignore next */
cov_tdthvif90().s[40]++;
const fieldUnexpected = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[13]++;
  cov_tdthvif90().s[41]++;
  return generic('responses.errors.field.unexpected', {
    type: options.type.name,
    field: options.field
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[42]++;
exports.fieldUnexpected = fieldUnexpected;
///* SUCCESS *///
/**
 * Translate the success message for a delete operation
 * @returns {string} The translated success message
 */
/* istanbul ignore next */
cov_tdthvif90().s[43]++;
const deleteSuccess = options => {
  /* istanbul ignore next */
  cov_tdthvif90().f[14]++;
  cov_tdthvif90().s[44]++;
  return generic('responses.success.deleted', {
    type: options.type.name
  }, options.i18n);
};
/* istanbul ignore next */
cov_tdthvif90().s[45]++;
exports.deleteSuccess = deleteSuccess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,