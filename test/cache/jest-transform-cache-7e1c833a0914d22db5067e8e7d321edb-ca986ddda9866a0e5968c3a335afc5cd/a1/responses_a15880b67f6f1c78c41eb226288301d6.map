{"version":3,"names":["cov_tdthvif90","actualCoverage","s","nestjs_i18n_1","require","generic","key","args","i18n","f","t","lang","b","I18nContext","current","undefined","authInvalidPayload","options","exports","idInvalid","type","name","id","idNotFound","idOrEmailMissing","emailInvalid","email","emailAlreadyUsed","emailNotFound","emailAlreadyVerified","emailNotVerified","emailInvalidToken","birthdayInvalid","date","toISOString","fieldMissing","field","fieldUnexpected","deleteSuccess"],"sources":["/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts"],"sourcesContent":["import type { Class, Email, I18nTranslations } from '@types';\n\nimport { PathImpl2 } from '@nestjs/config';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\nfunction generic(\n\tkey: PathImpl2<I18nTranslations>,\n\targs: Record<string, unknown>,\n\ti18n: I18nService<I18nTranslations>,\n): string {\n\treturn i18n.t(key, {\n\t\tlang: I18nContext.current()?.lang ?? undefined, // undefined -> fallback language\n\t\targs,\n\t});\n}\n\ninterface Response {\n\t/** The i18n Service used to translate the response */\n\ti18n: I18nService<I18nTranslations>;\n}\n\ninterface NamedResponse<T> extends Response {\n\t/** The object concerned by the translation */\n\ttype: Class<T>;\n}\n\n///* ERRORS *///\n/**\n * Get the translated error for an invalid payload\n * @returns {string} The translated error\n */\nexport const authInvalidPayload = (options: Response): string =>\n\tgeneric('responses.errors.auth.invalid_payload', {}, options.i18n);\n\n/**\n * Get the translated error for an invalid ID\n * @returns {string} The translated error\n */\nexport const idInvalid = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a not found ID\n * @returns {string} The translated error\n */\nexport const idNotFound = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a missing ID\n * @returns {string} The translated error\n */\nexport const idOrEmailMissing = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.id_or_email.missing', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email\n * @returns {string} The translated error\n */\nexport const emailInvalid = (options: Response & { email: Email }): string =>\n\tgeneric('responses.errors.email.invalid', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already used email\n * @returns {string} The translated error\n */\nexport const emailAlreadyUsed = (options: Response & { email: string }): string =>\n\tgeneric('responses.errors.email.used', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for a not found email\n * @returns {string} The translated error\n */\nexport const emailNotFound = <T>(options: NamedResponse<T> & { email: string }): string =>\n\tgeneric('responses.errors.email.not_found', { type: options.type.name, email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already verified email\n * @returns {string} The translated error\n */\nexport const emailAlreadyVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.verified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an unverified email\n * @returns {string} The translated error\n */\nexport const emailNotVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.unverified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email token\n * @returns {string} The translated error\n */\nexport const emailInvalidToken = (options: Response): string =>\n\tgeneric('responses.errors.email.token.invalid', {}, options.i18n);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const birthdayInvalid = (options: Response & { date: Date | string }): string =>\n\tgeneric(\n\t\t'responses.errors.birthday.invalid',\n\t\t{ date: typeof options.date === 'string' ? options.date : options.date.toISOString() },\n\t\toptions.i18n,\n\t);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const fieldMissing = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.missing', { type: options.type.name, field: options.field }, options.i18n);\n\n/**\n * Get the translated error for an unexpected field\n * @returns {string} The translated error\n */\nexport const fieldUnexpected = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.unexpected', { type: options.type.name, field: options.field }, options.i18n);\n\n///* SUCCESS *///\n/**\n * Translate the success message for a delete operation\n * @returns {string} The translated success message\n */\nexport const deleteSuccess = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.success.deleted', { type: options.type.name }, options.i18n);\n"],"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"}