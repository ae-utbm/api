615b33588acc886667f66987c0a644b1
"use strict";

/* istanbul ignore next */
function cov_1l9zmh8eq5() {
  var path = "/Users/juknum/Documents/Code/AE/api/src/utils/images.ts";
  var hash = "4d424a133fc2f3c60eb30803dde148e4deef9827";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/juknum/Documents/Code/AE/api/src/utils/images.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 109
        }
      },
      "4": {
        start: {
          line: 7,
          column: 13
        },
        end: {
          line: 7,
          column: 26
        }
      },
      "5": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 49
        }
      },
      "6": {
        start: {
          line: 15,
          column: 30
        },
        end: {
          line: 15,
          column: 78
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 28
        }
      },
      "8": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 28
        }
      },
      "9": {
        start: {
          line: 25,
          column: 30
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "10": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 36
        }
      },
      "11": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "12": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 71
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 39,
          column: 25
        }
      },
      "14": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 25
        }
      },
      "15": {
        start: {
          line: 40,
          column: 20
        },
        end: {
          line: 40,
          column: 59
        }
      },
      "16": {
        start: {
          line: 42,
          column: 19
        },
        end: {
          line: 42,
          column: 67
        }
      },
      "17": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 49,
          column: 7
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 44
        }
      },
      "20": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 19
        }
      },
      "21": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 52,
          column: 38
        }
      },
      "22": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "23": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 48
        }
      },
      "24": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 66,
          column: 24
        }
      },
      "25": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 24
        }
      },
      "26": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 17
        }
      },
      "27": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 55
        }
      },
      "28": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 72,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "isSquare",
        decl: {
          start: {
            line: 14,
            column: 15
          },
          end: {
            line: 14,
            column: 23
          }
        },
        loc: {
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "isBannerAspectRation",
        decl: {
          start: {
            line: 24,
            column: 15
          },
          end: {
            line: 24,
            column: 35
          }
        },
        loc: {
          start: {
            line: 24,
            column: 47
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 24
      },
      "3": {
        name: "convertToWebp",
        decl: {
          start: {
            line: 36,
            column: 15
          },
          end: {
            line: 36,
            column: 28
          }
        },
        loc: {
          start: {
            line: 36,
            column: 40
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 25
          },
          end: {
            line: 45,
            column: 26
          }
        },
        loc: {
          start: {
            line: 45,
            column: 40
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 45
      },
      "5": {
        name: "getStreamableFile",
        decl: {
          start: {
            line: 60,
            column: 9
          },
          end: {
            line: 60,
            column: 26
          }
        },
        loc: {
          start: {
            line: 60,
            column: 48
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 60
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 20
          }
        },
        loc: {
          start: {
            line: 67,
            column: 25
          },
          end: {
            line: 69,
            column: 9
          }
        },
        line: 67
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 39,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 39,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 38,
            column: 24
          }
        }, {
          start: {
            line: 38,
            column: 28
          },
          end: {
            line: 38,
            column: 45
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 48,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 24
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 16
          }
        }, {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 47,
            column: 24
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 33
          },
          end: {
            line: 60,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 60,
            column: 44
          },
          end: {
            line: 60,
            column: 46
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 66,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 8
          },
          end: {
            line: 66,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/juknum/Documents/Code/AE/api/src/utils/images.ts",
      mappings: ";;;;;;AAAA,2BAA8D;AAE9D,kDAA0B;AAE1B;;;;GAIG;AACI,KAAK,UAAU,QAAQ,CAAC,SAAiB;IAC/C,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC5D,OAAO,KAAK,KAAK,MAAM,CAAC;AACzB,CAAC;AAHD,4BAGC;AAED;;;;GAIG;AACI,KAAK,UAAU,oBAAoB,CAAC,SAAiB;IAC3D,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC5D,OAAO,KAAK,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AAHD,oDAGC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,aAAa,CAAC,SAAiB;IACpD,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,eAAK,EAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;IACrD,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,MAAM;QAAE,OAAO,SAAS,CAAC;IAE5D,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAExD,4BAA4B;IAC5B,MAAM,MAAM,GAAG,MAAM,IAAA,eAAK,EAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;IACjD,IAAA,eAAK,EAAC,MAAM,CAAC;SACX,IAAI,EAAE;SACN,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAC9B,uBAAuB;QACvB,IAAI,CAAC,GAAG,IAAI,IAAI;YAAE,IAAA,eAAU,EAAC,SAAS,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEJ,OAAO,OAAO,CAAC;AAChB,CAAC;AAhBD,sCAgBC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAAC,IAAY,EAAE,QAAQ,GAAG,EAAE;IAC5D,IAAI;QACH,OAAO,IAAA,qBAAgB,EAAC,IAAI,CAAC,CAAC;KAC9B;IAAC,OAAO,KAAK,EAAE;QACf,IAAI,QAAQ,KAAK,CAAC;YAAE,MAAM,KAAK,CAAC;QAEhC,UAAU,CAAC,GAAG,EAAE;YACf,OAAO,iBAAiB,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC5C,CAAC,EAAE,IAAI,CAAC,CAAC;KACT;AACF,CAAC;AAVD,8CAUC",
      names: [],
      sources: ["/Users/juknum/Documents/Code/AE/api/src/utils/images.ts"],
      sourcesContent: ["import { createReadStream, ReadStream, unlinkSync } from 'fs';\n\nimport sharp from 'sharp';\n\n/**\n * Check if an image is square\n * @param {string} imagePath The path to the image\n * @returns {boolean} True if the image is square, false otherwise\n */\nexport async function isSquare(imagePath: string): Promise<boolean> {\n\tconst { width, height } = await sharp(imagePath).metadata();\n\treturn width === height;\n}\n\n/**\n * Determine if the image is using a 1:3 aspect ratio\n * @param {string} imagePath The path to the image\n * @returns {boolean} True if the image is using a 1:3 aspect ratio, false otherwise\n */\nexport async function isBannerAspectRation(imagePath: string): Promise<boolean> {\n\tconst { width, height } = await sharp(imagePath).metadata();\n\treturn width / height === 1 / 3;\n}\n\n/**\n * Convert any static image format to webp\n * @param {string} imagePath The path to the image\n * @returns {string} The path to the converted image\n *\n * @info GIF images are not converted\n */\nexport async function convertToWebp(imagePath: string): Promise<string> {\n\tconst { format } = await sharp(imagePath).metadata();\n\tif (format === 'gif' || format === 'webp') return imagePath;\n\n\tconst newPath = imagePath.replace(/\\.[^/.]+$/, '.webp');\n\n\t// convert the image to webp\n\tconst buffer = await sharp(imagePath).toBuffer();\n\tsharp(buffer)\n\t\t.webp()\n\t\t.toFile(newPath, (err, info) => {\n\t\t\t// delete the old image\n\t\t\tif (!err && info) unlinkSync(imagePath);\n\t\t});\n\n\treturn newPath;\n}\n\n/**\n * Create a read stream from a file, with a retry mechanism\n * @param {string} path The path to the file\n * @param {number} attempts Number of attempts to try to create the stream @default 10\n * @returns {ReadStream} The read stream\n * @throws {Error} If the file can't be read after the attempts\n */\nexport function getStreamableFile(path: string, attempts = 10): ReadStream {\n\ttry {\n\t\treturn createReadStream(path);\n\t} catch (error) {\n\t\tif (attempts === 0) throw error;\n\n\t\tsetTimeout(() => {\n\t\t\treturn getStreamableFile(path, --attempts);\n\t\t}, 1000);\n\t}\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d424a133fc2f3c60eb30803dde148e4deef9827"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1l9zmh8eq5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1l9zmh8eq5();
var __importDefault =
/* istanbul ignore next */
(cov_1l9zmh8eq5().s[0]++,
/* istanbul ignore next */
(cov_1l9zmh8eq5().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1l9zmh8eq5().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1l9zmh8eq5().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1l9zmh8eq5().f[0]++;
  cov_1l9zmh8eq5().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[1][1]++, {
      "default": mod
    })
  );
}));
/* istanbul ignore next */
cov_1l9zmh8eq5().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1l9zmh8eq5().s[3]++;
exports.getStreamableFile = exports.convertToWebp = exports.isBannerAspectRation = exports.isSquare = void 0;
const fs_1 =
/* istanbul ignore next */
(cov_1l9zmh8eq5().s[4]++, require("fs"));
const sharp_1 =
/* istanbul ignore next */
(cov_1l9zmh8eq5().s[5]++, __importDefault(require("sharp")));
/**
 * Check if an image is square
 * @param {string} imagePath The path to the image
 * @returns {boolean} True if the image is square, false otherwise
 */
async function isSquare(imagePath) {
  /* istanbul ignore next */
  cov_1l9zmh8eq5().f[1]++;
  const {
    width,
    height
  } =
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().s[6]++, await (0, sharp_1.default)(imagePath).metadata());
  /* istanbul ignore next */
  cov_1l9zmh8eq5().s[7]++;
  return width === height;
}
/* istanbul ignore next */
cov_1l9zmh8eq5().s[8]++;
exports.isSquare = isSquare;
/**
 * Determine if the image is using a 1:3 aspect ratio
 * @param {string} imagePath The path to the image
 * @returns {boolean} True if the image is using a 1:3 aspect ratio, false otherwise
 */
async function isBannerAspectRation(imagePath) {
  /* istanbul ignore next */
  cov_1l9zmh8eq5().f[2]++;
  const {
    width,
    height
  } =
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().s[9]++, await (0, sharp_1.default)(imagePath).metadata());
  /* istanbul ignore next */
  cov_1l9zmh8eq5().s[10]++;
  return width / height === 1 / 3;
}
/* istanbul ignore next */
cov_1l9zmh8eq5().s[11]++;
exports.isBannerAspectRation = isBannerAspectRation;
/**
 * Convert any static image format to webp
 * @param {string} imagePath The path to the image
 * @returns {string} The path to the converted image
 *
 * @info GIF images are not converted
 */
async function convertToWebp(imagePath) {
  /* istanbul ignore next */
  cov_1l9zmh8eq5().f[3]++;
  const {
    format
  } =
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().s[12]++, await (0, sharp_1.default)(imagePath).metadata());
  /* istanbul ignore next */
  cov_1l9zmh8eq5().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().b[4][0]++, format === 'gif') ||
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().b[4][1]++, format === 'webp')) {
    /* istanbul ignore next */
    cov_1l9zmh8eq5().b[3][0]++;
    cov_1l9zmh8eq5().s[14]++;
    return imagePath;
  } else
  /* istanbul ignore next */
  {
    cov_1l9zmh8eq5().b[3][1]++;
  }
  const newPath =
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().s[15]++, imagePath.replace(/\.[^/.]+$/, '.webp'));
  // convert the image to webp
  const buffer =
  /* istanbul ignore next */
  (cov_1l9zmh8eq5().s[16]++, await (0, sharp_1.default)(imagePath).toBuffer());
  /* istanbul ignore next */
  cov_1l9zmh8eq5().s[17]++;
  (0, sharp_1.default)(buffer).webp().toFile(newPath, (err, info) => {
    /* istanbul ignore next */
    cov_1l9zmh8eq5().f[4]++;
    cov_1l9zmh8eq5().s[18]++;
    // delete the old image
    if (
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[6][0]++, !err) &&
    /* istanbul ignore next */
    (cov_1l9zmh8eq5().b[6][1]++, info)) {
      /* istanbul ignore next */
      cov_1l9zmh8eq5().b[5][0]++;
      cov_1l9zmh8eq5().s[19]++;
      (0, fs_1.unlinkSync)(imagePath);
    } else
    /* istanbul ignore next */
    {
      cov_1l9zmh8eq5().b[5][1]++;
    }
  });
  /* istanbul ignore next */
  cov_1l9zmh8eq5().s[20]++;
  return newPath;
}
/* istanbul ignore next */
cov_1l9zmh8eq5().s[21]++;
exports.convertToWebp = convertToWebp;
/**
 * Create a read stream from a file, with a retry mechanism
 * @param {string} path The path to the file
 * @param {number} attempts Number of attempts to try to create the stream @default 10
 * @returns {ReadStream} The read stream
 * @throws {Error} If the file can't be read after the attempts
 */
function getStreamableFile(path, attempts =
/* istanbul ignore next */
(cov_1l9zmh8eq5().b[7][0]++, 10)) {
  /* istanbul ignore next */
  cov_1l9zmh8eq5().f[5]++;
  cov_1l9zmh8eq5().s[22]++;
  try {
    /* istanbul ignore next */
    cov_1l9zmh8eq5().s[23]++;
    return (0, fs_1.createReadStream)(path);
  } catch (error) {
    /* istanbul ignore next */
    cov_1l9zmh8eq5().s[24]++;
    if (attempts === 0) {
      /* istanbul ignore next */
      cov_1l9zmh8eq5().b[8][0]++;
      cov_1l9zmh8eq5().s[25]++;
      throw error;
    } else
    /* istanbul ignore next */
    {
      cov_1l9zmh8eq5().b[8][1]++;
    }
    cov_1l9zmh8eq5().s[26]++;
    setTimeout(() => {
      /* istanbul ignore next */
      cov_1l9zmh8eq5().f[6]++;
      cov_1l9zmh8eq5().s[27]++;
      return getStreamableFile(path, --attempts);
    }, 1000);
  }
}
/* istanbul ignore next */
cov_1l9zmh8eq5().s[28]++;
exports.getStreamableFile = getStreamableFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,