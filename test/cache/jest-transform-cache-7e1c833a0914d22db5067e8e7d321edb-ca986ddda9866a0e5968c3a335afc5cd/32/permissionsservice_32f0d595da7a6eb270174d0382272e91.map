{"version":3,"names":["cov_1efsnxwz15","actualCoverage","core_1","s","require","common_1","schedule_1","perms_1","patch_dto_1","permission_entity_1","role_entity_1","user_entity_1","PermissionsService","exports","constructor","orm","f","revokeExpiredPermissions","permissions","em","find","Permission","expires","$lte","Date","revoked","length","b","forEach","role","updated_at","persistAndFlush","addPermissionToUser","name","user_id","user","findOne","User","id","NotFoundException","PERMISSIONS_NAMES","includes","BadRequestException","permission","create","addPermissionToRole","role_id","Role","push","getPermissionsOfUser","input","perms","loadItems","show_expired","filter","p","show_revoked","getPermissionsOfRole","editPermissionOfUser","modified","perm","__decorate","Cron","UseRequestContext","PermissionPatchDTO","Injectable","MikroORM"],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.service.ts"],"sourcesContent":["import type { PermissionName } from '@types';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nimport { PermissionPatchDTO } from './dto/patch.dto';\nimport { Permission } from './entities/permission.entity';\nimport { Role } from '../roles/entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class PermissionsService {\n\tconstructor(private readonly orm: MikroORM) {}\n\n\t/**\n\t * Automatically revoke permissions that have expired\n\t * Runs every 10 minutes\n\t */\n\t@Cron('0 */10 * * * *')\n\t@UseRequestContext()\n\tasync revokeExpiredPermissions(): Promise<void> {\n\t\tconst permissions = await this.orm.em.find(Permission, { expires: { $lte: new Date() }, revoked: false });\n\t\tif (!permissions.length) return;\n\n\t\tpermissions.forEach((role) => {\n\t\t\trole.revoked = true;\n\t\t\trole.updated_at = new Date();\n\t\t});\n\n\t\tawait this.orm.em.persistAndFlush(permissions);\n\t}\n\n\t/**\n\t * Add a permission to a user\n\t * @param {PermissionName} name The permission name in caps\n\t * @param {number} user_id To which user the permission should be added\n\t * @param {Date} expires When the permission should expire\n\t * @returns {Promise<Permission>} The created permission\n\t */\n\t@UseRequestContext()\n\tasync addPermissionToUser(name: PermissionName, user_id: number, expires: Date): Promise<Permission> {\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException(`User with id '${user_id}' not found`);\n\t\tif (!PERMISSIONS_NAMES.includes(name)) throw new BadRequestException(`Permission '${name}' does not exist`);\n\n\t\tconst permission = this.orm.em.create(Permission, { name, user, expires, revoked: false });\n\n\t\tawait this.orm.em.persistAndFlush(permission);\n\t\treturn permission;\n\t}\n\n\t/**\n\t * Add a permission to an existing role\n\t * @param {PermissionName} name The permission name in caps\n\t * @param {number} role_id the role id to which the permission should be added\n\t * @returns {Promise<Role>}\n\t */\n\t@UseRequestContext()\n\tasync addPermissionToRole(name: PermissionName, role_id: number): Promise<Role> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException(`Role with id '${role_id}' not found`);\n\t\tif (!PERMISSIONS_NAMES.includes(name)) throw new BadRequestException(`Permission '${name}' does not exist`);\n\n\t\tif (!role.permissions.includes(name)) {\n\t\t\trole.permissions.push(name);\n\t\t\tawait this.orm.em.persistAndFlush(role);\n\t\t}\n\n\t\treturn role;\n\t}\n\n\t/**\n\t * Get all permissions of a user\n\t * @param input Arguments for the query\n\t * @returns {Promise<Permission[]>} The permissions of the user\n\t */\n\t@UseRequestContext()\n\tasync getPermissionsOfUser(\n\t\tid: number,\n\t\tinput?: { show_expired: boolean; show_revoked: boolean },\n\t): Promise<Permission[]> {\n\t\tconst user = await this.orm.em.findOne(User, { id });\n\t\tif (!user) throw new NotFoundException('User not found');\n\n\t\tconst perms = await user.permissions.loadItems();\n\n\t\tif (input && !input.show_expired) perms.filter((p) => p.expires > new Date());\n\t\tif (input && !input.show_revoked) perms.filter((p) => p.revoked === false);\n\n\t\treturn perms;\n\t}\n\n\t/**\n\t * Get all permissions attached to a role\n\t * @param {number} role_id The role id\n\t * @returns {Promise<PermissionName[]>} The permissions of the role\n\t */\n\t@UseRequestContext()\n\tasync getPermissionsOfRole(role_id: number): Promise<PermissionName[]> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException('Role not found');\n\n\t\treturn role.permissions;\n\t}\n\n\t@UseRequestContext()\n\tasync editPermissionOfUser(user_id: number, modified: PermissionPatchDTO): Promise<Permission> {\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException('User not found');\n\n\t\tconst perm = await this.orm.em.findOne(Permission, { id: modified.id });\n\t\tif (!perm) throw new NotFoundException('Permission not found on this user');\n\n\t\tif (modified.name) perm.name = modified.name;\n\t\tif (modified.expires) perm.expires = modified.expires;\n\t\tif (modified.revoked) perm.revoked = modified.revoked;\n\n\t\tawait this.orm.em.persistAndFlush(perm);\n\t\treturn perm;\n\t}\n}\n"],"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"}