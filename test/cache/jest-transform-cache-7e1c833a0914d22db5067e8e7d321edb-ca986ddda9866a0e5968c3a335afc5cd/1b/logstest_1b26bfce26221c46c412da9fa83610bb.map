{"file":"/Users/juknum/Documents/Code/AE/api/test/e2e/logs.test.ts","mappings":"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","names":[],"sources":["/Users/juknum/Documents/Code/AE/api/test/e2e/logs.test.ts"],"sourcesContent":["import request from 'supertest';\n\nimport { TokenDTO } from '@modules/auth/dto/token.dto';\nimport { User } from '@modules/users/entities/user.entity';\nimport { emailNotVerified, idInvalid, idNotFound } from '@utils/responses';\n\nimport { app, i18n } from '../base.setup';\n\ndescribe('LogsController (e2e)', () => {\n\tlet tokenUnverified: string;\n\tlet userIdUnverified: number;\n\n\tlet tokenUnauthorized: string;\n\tlet userIdUnauthorized: number;\n\n\tlet tokenLogModerator: string;\n\tlet userIdLogModerator: number;\n\n\tbeforeAll(async () => {\n\t\ttype Res = Omit<request.Response, 'body'> & { body: TokenDTO };\n\n\t\tconst responseA: Res = await request(app.getHttpServer()).post('/api/auth/login').send({\n\t\t\temail: 'unverified@email.com',\n\t\t\tpassword: 'root',\n\t\t});\n\n\t\ttokenUnverified = responseA.body.token;\n\t\tuserIdUnverified = responseA.body.user_id;\n\n\t\tconst responseB: Res = await request(app.getHttpServer()).post('/api/auth/login').send({\n\t\t\temail: 'unauthorized@email.com',\n\t\t\tpassword: 'root',\n\t\t});\n\n\t\ttokenUnauthorized = responseB.body.token;\n\t\tuserIdUnauthorized = responseB.body.user_id;\n\n\t\tconst responseC: Res = await request(app.getHttpServer()).post('/api/auth/login').send({\n\t\t\temail: 'logs@email.com',\n\t\t\tpassword: 'root',\n\t\t});\n\n\t\ttokenLogModerator = responseC.body.token;\n\t\tuserIdLogModerator = responseC.body.user_id;\n\t});\n\n\tdescribe('/api/logs/user/{user_id} (GET)', () => {\n\t\tit('should return 401 when the user is not authenticated', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get('/api/logs/user/1').expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\t// TODO: add an error message ('Unauthorized') and translate the message field (add more context too)\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: 'Unauthorized',\n\t\t\t});\n\t\t});\n\n\t\tit('should return 403 when the user is not the same as the user ID in the request', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${userIdUnverified}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenUnauthorized}`)\n\t\t\t\t.expect(403);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Forbidden',\n\t\t\t\tstatusCode: 403,\n\t\t\t\tmessage: 'Forbidden resource', // TODO translate this\n\t\t\t});\n\t\t});\n\n\t\tit('should return 404 when the user does not exist', async () => {\n\t\t\tconst fakeId = 9999;\n\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${fakeId}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenLogModerator}`)\n\t\t\t\t.expect(404);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Not Found',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tmessage: idNotFound({ i18n, type: User, id: fakeId }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when the user ID is invalid', async () => {\n\t\t\tconst fakeId = 'invalid';\n\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${fakeId}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenLogModerator}`)\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: idInvalid({ i18n, type: User, id: fakeId }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 401 when user is not verified', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${userIdUnverified}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenUnverified}`)\n\t\t\t\t.expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: emailNotVerified({ i18n, type: User }),\n\t\t\t\terror: 'Unauthorized',\n\t\t\t});\n\t\t});\n\n\t\tit('should return 200 when user is asking for another user with the right permission', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${userIdUnauthorized}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenLogModerator}`)\n\t\t\t\t.expect(200);\n\n\t\t\texpect(response.body).toEqual(expect.any(Array));\n\t\t});\n\n\t\tit('should return 403 when user is asking for another user without the permission', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/logs/user/${userIdLogModerator}`)\n\t\t\t\t.set('Authorization', `Bearer ${tokenUnauthorized}`)\n\t\t\t\t.expect(403);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Forbidden',\n\t\t\t\tstatusCode: 403,\n\t\t\t\tmessage: 'Forbidden resource', // TODO translate this\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('/api/logs/{user} (DELETE)', () => {\n\t\t// it();\n\t});\n});\n"],"version":3}