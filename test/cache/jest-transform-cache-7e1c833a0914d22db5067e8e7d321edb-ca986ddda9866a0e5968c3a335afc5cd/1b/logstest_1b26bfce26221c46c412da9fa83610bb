0114a3e71e4e54af30c4015e5e392ffe
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const user_entity_1 = require("@modules/users/entities/user.entity");
const responses_1 = require("@utils/responses");
const base_setup_1 = require("../base.setup");
describe('LogsController (e2e)', () => {
    let tokenUnverified;
    let userIdUnverified;
    let tokenUnauthorized;
    let userIdUnauthorized;
    let tokenLogModerator;
    let userIdLogModerator;
    beforeAll(async () => {
        const responseA = await (0, supertest_1.default)(base_setup_1.app.getHttpServer()).post('/api/auth/login').send({
            email: 'unverified@email.com',
            password: 'root',
        });
        tokenUnverified = responseA.body.token;
        userIdUnverified = responseA.body.user_id;
        const responseB = await (0, supertest_1.default)(base_setup_1.app.getHttpServer()).post('/api/auth/login').send({
            email: 'unauthorized@email.com',
            password: 'root',
        });
        tokenUnauthorized = responseB.body.token;
        userIdUnauthorized = responseB.body.user_id;
        const responseC = await (0, supertest_1.default)(base_setup_1.app.getHttpServer()).post('/api/auth/login').send({
            email: 'logs@email.com',
            password: 'root',
        });
        tokenLogModerator = responseC.body.token;
        userIdLogModerator = responseC.body.user_id;
    });
    describe('/api/logs/user/{user_id} (GET)', () => {
        it('should return 401 when the user is not authenticated', async () => {
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer()).get('/api/logs/user/1').expect(401);
            expect(response.body).toEqual({
                // TODO: add an error message ('Unauthorized') and translate the message field (add more context too)
                statusCode: 401,
                message: 'Unauthorized',
            });
        });
        it('should return 403 when the user is not the same as the user ID in the request', async () => {
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${userIdUnverified}`)
                .set('Authorization', `Bearer ${tokenUnauthorized}`)
                .expect(403);
            expect(response.body).toEqual({
                error: 'Forbidden',
                statusCode: 403,
                message: 'Forbidden resource', // TODO translate this
            });
        });
        it('should return 404 when the user does not exist', async () => {
            const fakeId = 9999;
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${fakeId}`)
                .set('Authorization', `Bearer ${tokenLogModerator}`)
                .expect(404);
            expect(response.body).toEqual({
                error: 'Not Found',
                statusCode: 404,
                message: (0, responses_1.idNotFound)({ i18n: base_setup_1.i18n, type: user_entity_1.User, id: fakeId }),
            });
        });
        it('should return 400 when the user ID is invalid', async () => {
            const fakeId = 'invalid';
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${fakeId}`)
                .set('Authorization', `Bearer ${tokenLogModerator}`)
                .expect(400);
            expect(response.body).toEqual({
                error: 'Bad Request',
                statusCode: 400,
                message: (0, responses_1.idInvalid)({ i18n: base_setup_1.i18n, type: user_entity_1.User, id: fakeId }),
            });
        });
        it('should return 401 when user is not verified', async () => {
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${userIdUnverified}`)
                .set('Authorization', `Bearer ${tokenUnverified}`)
                .expect(401);
            expect(response.body).toEqual({
                statusCode: 401,
                message: (0, responses_1.emailNotVerified)({ i18n: base_setup_1.i18n, type: user_entity_1.User }),
                error: 'Unauthorized',
            });
        });
        it('should return 200 when user is asking for another user with the right permission', async () => {
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${userIdUnauthorized}`)
                .set('Authorization', `Bearer ${tokenLogModerator}`)
                .expect(200);
            expect(response.body).toEqual(expect.any(Array));
        });
        it('should return 403 when user is asking for another user without the permission', async () => {
            const response = await (0, supertest_1.default)(base_setup_1.app.getHttpServer())
                .get(`/api/logs/user/${userIdLogModerator}`)
                .set('Authorization', `Bearer ${tokenUnauthorized}`)
                .expect(403);
            expect(response.body).toEqual({
                error: 'Forbidden',
                statusCode: 403,
                message: 'Forbidden resource', // TODO translate this
            });
        });
    });
    describe('/api/logs/{user} (DELETE)', () => {
        // it();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,