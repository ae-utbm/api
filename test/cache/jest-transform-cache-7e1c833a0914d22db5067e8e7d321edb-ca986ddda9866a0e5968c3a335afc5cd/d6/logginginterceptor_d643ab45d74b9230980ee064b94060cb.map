{"version":3,"names":["cov_y4iv7gnf1","actualCoverage","core_1","s","require","common_1","rxjs_1","user_entity_1","log_entity_1","LoggingInterceptor","exports","constructor","orm","f","intercept","context","next","request","switchToHttp","getRequest","user_id","user","b","id","handle","em","fork","findOne","User","log","create","Log","action","getClass","name","getHandler","ip","replace","user_agent","headers","route","path","method","body","query","params","updated_at","undefined","pipe","tap","finalize","response","getResponse","status_code","statusCode","error","error_stack","error_message","Date","flush","__decorate","UseRequestContext","Injectable","MikroORM"],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/logs/interceptor/logging.interceptor.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { tap, type Observable } from 'rxjs';\n\nimport { User } from '@modules/users/entities/user.entity';\n\nimport { Log } from '../entities/log.entity';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n\tconstructor(private readonly orm: MikroORM) {}\n\n\t@UseRequestContext()\n\tasync intercept(context: ExecutionContext, next: CallHandler): Promise<Observable<unknown>> {\n\t\ttype Req = IncomingMessage & {\n\t\t\troute: { path: string };\n\t\t\tuser: User;\n\t\t\tparams: Record<string, string>;\n\t\t\tquery: Record<string, string>;\n\t\t\tbody: Record<string, string>;\n\t\t\tip: string;\n\t\t};\n\n\t\tconst request = context.switchToHttp().getRequest<Req>();\n\t\tconst user_id = request.user ? request.user.id : 'Guest';\n\n\t\t// No need to log guest users\n\t\tif (user_id === 'Guest') return next.handle();\n\n\t\t// Create a separate entity manager for this request\n\t\t// > to avoid conflicts with the main entity manager (in the request scope)\n\t\tconst em = this.orm.em.fork();\n\n\t\t// Create a new log entry\n\t\tconst user = await em.findOne(User, { id: user_id });\n\t\tconst log = em.create(Log, {\n\t\t\tuser,\n\t\t\taction: context.getClass().name + '.' + context.getHandler().name,\n\t\t\tip: request.ip.replace('::1', '127.0.0.1'),\n\t\t\tuser_agent: request.headers['user-agent'] ?? 'Unknown',\n\t\t\troute: request.route.path,\n\t\t\tmethod: request.method,\n\t\t\tbody: request.body as unknown as string,\n\t\t\tquery: request.query as unknown as string,\n\t\t\tparams: request.params as unknown as string,\n\t\t\tupdated_at: undefined,\n\t\t});\n\n\t\treturn next.handle().pipe(\n\t\t\ttap({\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\t\t\tfinalize: async () => {\n\t\t\t\t\ttype Res = ServerResponse & {\n\t\t\t\t\t\tbody: Record<string, string>;\n\t\t\t\t\t\terror: string;\n\t\t\t\t\t\terror_stack: string;\n\t\t\t\t\t\terror_message: string;\n\t\t\t\t\t};\n\t\t\t\t\tconst response = context.switchToHttp().getResponse<Res>();\n\n\t\t\t\t\t// Update the log entity after the observable is ended\n\t\t\t\t\tlog.response = response.body as unknown as string; // TODO: Get the actual response body (actually null)\n\t\t\t\t\tlog.status_code = response.statusCode;\n\t\t\t\t\tlog.error = response.error;\n\t\t\t\t\tlog.error_stack = response.error_stack;\n\t\t\t\t\tlog.error_message = response.error_message;\n\t\t\t\t\tlog.updated_at = new Date();\n\n\t\t\t\t\tawait em.flush();\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n}\n"],"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"}