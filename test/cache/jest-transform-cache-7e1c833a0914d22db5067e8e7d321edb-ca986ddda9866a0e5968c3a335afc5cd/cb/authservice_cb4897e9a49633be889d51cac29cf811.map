{"version":3,"names":["cov_2bue5pxn8m","actualCoverage","common_1","s","require","jwt_1","bcrypt_1","nestjs_i18n_1","user_entity_1","users_service_1","responses_1","AuthService","exports","constructor","i18n","usersService","jwtService","f","signIn","email","pass","user","findOne","b","password","compareSync","UnauthorizedException","payload","sub","id","token","signAsync","user_id","validateUser","email_verified","emailNotVerified","type","User","__decorate","Injectable","I18nService","UsersService","JwtService"],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts"],"sourcesContent":["import type { JWTPayload, Email, I18nTranslations } from '@types';\n\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compareSync } from 'bcrypt';\nimport { I18nService } from 'nestjs-i18n';\n\nimport { User } from '@modules/users/entities/user.entity';\nimport { UsersService } from '@modules/users/users.service';\nimport { emailNotVerified } from '@utils/responses';\n\nimport { TokenDTO } from './dto/token.dto';\n\n@Injectable()\nexport class AuthService {\n\tconstructor(\n\t\tprivate readonly i18n: I18nService<I18nTranslations>,\n\t\tprivate readonly usersService: UsersService,\n\t\tprivate readonly jwtService: JwtService,\n\t) {}\n\n\tasync signIn(email: Email, pass: string): Promise<TokenDTO> {\n\t\tconst user: User = await this.usersService.findOne({ email: email }, false);\n\n\t\tif (user.password !== pass && !compareSync(pass, user.password)) {\n\t\t\tthrow new UnauthorizedException('Password mismatch');\n\t\t}\n\n\t\tconst payload = { sub: user.id, email: user.email };\n\t\treturn {\n\t\t\ttoken: await this.jwtService.signAsync(payload),\n\t\t\tuser_id: user.id,\n\t\t};\n\t}\n\n\t/**\n\t * Validate the user from the payload\n\t * @param {JWTPayload} payload JWT Payload to validate\n\t * @returns {User} The user if found and valid, throw otherwise (email not verified)\n\t */\n\tasync validateUser(payload: JWTPayload): Promise<User> {\n\t\tconst user = await this.usersService.findOne({ email: payload.email }, false);\n\n\t\t// throw if user not verified\n\t\tif (!user.email_verified) throw new UnauthorizedException(emailNotVerified({ i18n: this.i18n, type: User }));\n\t\treturn user;\n\t}\n}\n"],"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"}