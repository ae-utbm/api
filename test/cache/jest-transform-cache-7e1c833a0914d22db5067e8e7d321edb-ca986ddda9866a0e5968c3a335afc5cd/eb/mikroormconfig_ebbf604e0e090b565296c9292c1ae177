dad096ab621ac74781e7cc7b34a6129e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const postgresql_1 = require("@mikro-orm/postgresql");
const reflection_1 = require("@mikro-orm/reflection");
const sql_highlighter_1 = require("@mikro-orm/sql-highlighter");
const common_1 = require("@nestjs/common");
require("dotenv/config");
const logger = new common_1.Logger('MikroORM');
/**
 * Global MikroORM configuration
 */
const config = {
    driver: postgresql_1.PostgreSqlDriver,
    dbName: process.env['DB_NAME'] ?? 'ae_test',
    port: parseInt(process.env['DB_PORT'], 10) ?? 5432,
    host: process.env['DB_HOST'] ?? 'localhost',
    user: process.env['DB_USER'] ?? 'postgres',
    password: process.env['DB_PASSWORD'] ?? 'postgres',
    debug: process.env['DEBUG'] === 'true',
    entities: ['./dist/modules/**/entities/*.entity.js'],
    entitiesTs: ['./src/modules/**/entities/*.entity.ts'],
    highlighter: new sql_highlighter_1.SqlHighlighter(),
    migrations: {
        transactional: true,
        path: './dist/database/migrations',
        pathTs: './src/database/migrations',
        glob: '!(*.d).{js,ts}',
    },
    seeder: {
        defaultSeeder: 'DatabaseSeeder',
        path: './dist/database/seeders',
        pathTs: './src/database/seeders',
        glob: '!(*.d).{js,ts}',
    },
    logger: logger.log.bind(logger),
    metadataProvider: reflection_1.TsMorphMetadataProvider,
};
exports.default = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2p1a251bS9Eb2N1bWVudHMvQ29kZS9BRS9hcGkvc3JjL21pa3JvLW9ybS5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxzREFBeUQ7QUFDekQsc0RBQWdFO0FBQ2hFLGdFQUE0RDtBQUM1RCwyQ0FBd0M7QUFFeEMseUJBQXVCO0FBRXZCLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRXRDOztHQUVHO0FBQ0gsTUFBTSxNQUFNLEdBQTBEO0lBQ3JFLE1BQU0sRUFBRSw2QkFBZ0I7SUFDeEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUztJQUMzQyxJQUFJLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksSUFBSTtJQUNsRCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXO0lBQzNDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVU7SUFDMUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksVUFBVTtJQUNsRCxLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxNQUFNO0lBQ3RDLFFBQVEsRUFBRSxDQUFDLHdDQUF3QyxDQUFDO0lBQ3BELFVBQVUsRUFBRSxDQUFDLHVDQUF1QyxDQUFDO0lBQ3JELFdBQVcsRUFBRSxJQUFJLGdDQUFjLEVBQUU7SUFDakMsVUFBVSxFQUFFO1FBQ1gsYUFBYSxFQUFFLElBQUk7UUFDbkIsSUFBSSxFQUFFLDRCQUE0QjtRQUNsQyxNQUFNLEVBQUUsMkJBQTJCO1FBQ25DLElBQUksRUFBRSxnQkFBZ0I7S0FDdEI7SUFDRCxNQUFNLEVBQUU7UUFDUCxhQUFhLEVBQUUsZ0JBQWdCO1FBQy9CLElBQUksRUFBRSx5QkFBeUI7UUFDL0IsTUFBTSxFQUFFLHdCQUF3QjtRQUNoQyxJQUFJLEVBQUUsZ0JBQWdCO0tBQ3RCO0lBQ0QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBMkQ7SUFDekYsZ0JBQWdCLEVBQUUsb0NBQXVCO0NBQ3pDLENBQUM7QUFFRixrQkFBZSxNQUFNLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2p1a251bS9Eb2N1bWVudHMvQ29kZS9BRS9hcGkvc3JjL21pa3JvLW9ybS5jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWlrcm9PUk1PcHRpb25zLCBJRGF0YWJhc2VEcml2ZXIsIENvbm5lY3Rpb24gfSBmcm9tICdAbWlrcm8tb3JtL2NvcmUnO1xuaW1wb3J0IHsgUG9zdGdyZVNxbERyaXZlciB9IGZyb20gJ0BtaWtyby1vcm0vcG9zdGdyZXNxbCc7XG5pbXBvcnQgeyBUc01vcnBoTWV0YWRhdGFQcm92aWRlciB9IGZyb20gJ0BtaWtyby1vcm0vcmVmbGVjdGlvbic7XG5pbXBvcnQgeyBTcWxIaWdobGlnaHRlciB9IGZyb20gJ0BtaWtyby1vcm0vc3FsLWhpZ2hsaWdodGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcblxuaW1wb3J0ICdkb3RlbnYvY29uZmlnJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignTWlrcm9PUk0nKTtcblxuLyoqXG4gKiBHbG9iYWwgTWlrcm9PUk0gY29uZmlndXJhdGlvblxuICovXG5jb25zdCBjb25maWc6IFBhcnRpYWw8TWlrcm9PUk1PcHRpb25zPElEYXRhYmFzZURyaXZlcjxDb25uZWN0aW9uPj4+ID0ge1xuXHRkcml2ZXI6IFBvc3RncmVTcWxEcml2ZXIsXG5cdGRiTmFtZTogcHJvY2Vzcy5lbnZbJ0RCX05BTUUnXSA/PyAnYWVfdGVzdCcsXG5cdHBvcnQ6IHBhcnNlSW50KHByb2Nlc3MuZW52WydEQl9QT1JUJ10sIDEwKSA/PyA1NDMyLFxuXHRob3N0OiBwcm9jZXNzLmVudlsnREJfSE9TVCddID8/ICdsb2NhbGhvc3QnLFxuXHR1c2VyOiBwcm9jZXNzLmVudlsnREJfVVNFUiddID8/ICdwb3N0Z3JlcycsXG5cdHBhc3N3b3JkOiBwcm9jZXNzLmVudlsnREJfUEFTU1dPUkQnXSA/PyAncG9zdGdyZXMnLFxuXHRkZWJ1ZzogcHJvY2Vzcy5lbnZbJ0RFQlVHJ10gPT09ICd0cnVlJyxcblx0ZW50aXRpZXM6IFsnLi9kaXN0L21vZHVsZXMvKiovZW50aXRpZXMvKi5lbnRpdHkuanMnXSxcblx0ZW50aXRpZXNUczogWycuL3NyYy9tb2R1bGVzLyoqL2VudGl0aWVzLyouZW50aXR5LnRzJ10sXG5cdGhpZ2hsaWdodGVyOiBuZXcgU3FsSGlnaGxpZ2h0ZXIoKSxcblx0bWlncmF0aW9uczoge1xuXHRcdHRyYW5zYWN0aW9uYWw6IHRydWUsXG5cdFx0cGF0aDogJy4vZGlzdC9kYXRhYmFzZS9taWdyYXRpb25zJyxcblx0XHRwYXRoVHM6ICcuL3NyYy9kYXRhYmFzZS9taWdyYXRpb25zJyxcblx0XHRnbG9iOiAnISgqLmQpLntqcyx0c30nLFxuXHR9LFxuXHRzZWVkZXI6IHtcblx0XHRkZWZhdWx0U2VlZGVyOiAnRGF0YWJhc2VTZWVkZXInLFxuXHRcdHBhdGg6ICcuL2Rpc3QvZGF0YWJhc2Uvc2VlZGVycycsXG5cdFx0cGF0aFRzOiAnLi9zcmMvZGF0YWJhc2Uvc2VlZGVycycsXG5cdFx0Z2xvYjogJyEoKi5kKS57anMsdHN9Jyxcblx0fSxcblx0bG9nZ2VyOiBsb2dnZXIubG9nLmJpbmQobG9nZ2VyKSBhcyBNaWtyb09STU9wdGlvbnM8SURhdGFiYXNlRHJpdmVyPENvbm5lY3Rpb24+PlsnbG9nZ2VyJ10sXG5cdG1ldGFkYXRhUHJvdmlkZXI6IFRzTW9ycGhNZXRhZGF0YVByb3ZpZGVyLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuIl0sInZlcnNpb24iOjN9