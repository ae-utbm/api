{"file":"/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","mappings":";;;;;;;;;;;;AAEA,0CAA2E;AAC3E,6CAA8C;AAE9C,sEAAkE;AAElE,qEAA2D;AAC3D,2DAAoE;AAEpE;;GAEG;AAEI,IAAM,IAAI,kBAAV,MAAM,IAAK,SAAQ,wBAAU;IAA7B;;QAMN,gDAAgD;QAGhD,YAAO,GAAG,KAAK,CAAC;QAYhB,iDAAiD;QAEjD,UAAK,GAAG,IAAI,iBAAU,CAAO,IAAI,CAAC,CAAC;IACpC,CAAC;CAAA,CAAA;AApBA;IAFC,IAAA,eAAQ,EAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAC1B,IAAA,qBAAW,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;;kCAC3B;AAKxB;IAFC,IAAA,eAAQ,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;IACvD,IAAA,qBAAW,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;qCAC/B;AAKhB;IAFC,IAAA,eAAQ,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAChC,IAAA,qBAAW,GAAE;8BACL,IAAI;qCAAC;AAKd;IAFC,IAAA,eAAQ,EAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IACjC,IAAA,qBAAW,EAAC,EAAE,IAAI,EAAE,yBAAiB,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;yCAC1B;AAI9B;IADC,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,kBAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;;mCAC3B;eAvBvB,IAAI;IADhB,IAAA,aAAM,EAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;GAClB,IAAI,CAwBhB","names":[],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts"],"sourcesContent":["import type { PermissionName, RoleEntity } from '@types';\n\nimport { Collection, Entity, ManyToMany, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { Permission } from '@modules/permissions/entities/permission.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\n/**\n * Entity used to store roles, which are a collection of permissions\n */\n@Entity({ tableName: 'roles' })\nexport class Role extends BaseEntity implements RoleEntity<Permission, User> {\n\t/** Name of the role, in caps */\n\t@Property({ unique: true })\n\t@ApiProperty({ type: String, example: 'AE_ADMIN' })\n\tname: Uppercase<string>;\n\n\t/** Determine wether the role is still active */\n\t@Property({ name: 'is_revoked', onCreate: () => false })\n\t@ApiProperty({ type: Boolean, default: false })\n\trevoked = false;\n\n\t/** Specify when the role should expires */\n\t@Property({ name: 'expires_at' })\n\t@ApiProperty()\n\texpires: Date;\n\n\t/** Specify what permissions the role has */\n\t@Property({ name: 'permissions' })\n\t@ApiProperty({ enum: PERMISSIONS_NAMES, isArray: true })\n\tpermissions: PermissionName[];\n\n\t/** Specify to which user the role is attached */\n\t@ManyToMany(() => User, (user) => user.roles, { owner: true })\n\tusers = new Collection<User>(this);\n}\n"],"version":3}