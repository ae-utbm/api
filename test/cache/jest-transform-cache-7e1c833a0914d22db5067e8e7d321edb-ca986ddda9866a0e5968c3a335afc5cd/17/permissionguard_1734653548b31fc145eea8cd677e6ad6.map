{"version":3,"names":["cov_7aikwyg3y","actualCoverage","common_1","s","require","config_1","core_1","jwt_1","users_service_1","PermissionGuard","exports","constructor","jwtService","configService","userService","reflector","f","canActivate","context","request","switchToHttp","getRequest","permsToValidate","get","getHandler","bearerToken","headers","authorization","decodedToken","verify","replace","secret","user","findOne","id","sub","perms","permissions","loadItems","filter","p","b","expires","Date","revoked","map","name","rolesPerms","roles","flat","acquiredPerms","includes","some","__decorate","Injectable","JwtService","ConfigService","UsersService","Reflector"],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts"],"sourcesContent":["import type { JWTPayload, PermissionName } from '@types';\nimport type { Request } from 'express';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\n/**\n * Check if the authenticated user has the required permissions to access the route\n * @example\n * UseGuards(PermissionGuard)\n * ApiPermissions('permission1', 'permission2')\n * async route() {\n * // ...\n * }\n */\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n\tconstructor(\n\t\tprotected readonly jwtService: JwtService,\n\t\tprotected readonly configService: ConfigService,\n\t\tprotected readonly userService: UsersService,\n\t\tprotected readonly reflector: Reflector,\n\t) {}\n\n\tasync canActivate(context: ExecutionContext) {\n\t\ttype Req = Request & { headers: { authorization: string } };\n\n\t\t// Access the request object from the execution context\n\t\tconst request = context.switchToHttp().getRequest<Req>();\n\n\t\t// Access the permissions required to access the route\n\t\tconst permsToValidate = this.reflector.get<Array<PermissionName>>('guard_permissions', context.getHandler());\n\n\t\t// Retrieve the authenticated user from the request's user object or session\n\t\tconst bearerToken = request.headers.authorization;\n\n\t\t// Verify and decode the JWT token to extract the user ID\n\t\tconst decodedToken = this.jwtService.verify<JWTPayload>(bearerToken.replace('Bearer ', ''), {\n\t\t\tsecret: this.configService.get<string>('auth.jwtKey'),\n\t\t});\n\n\t\t// Get the user from the database\n\t\t// If no user found -> thrown within the service\n\t\tconst user = await this.userService.findOne({ id: decodedToken.sub });\n\n\t\tconst perms = (await user.permissions.loadItems())\n\t\t\t.filter((p) => p.expires > new Date() && p.revoked === false)\n\t\t\t.map((p) => p.name);\n\n\t\tconst rolesPerms = (await user.roles.loadItems())\n\t\t\t.filter((p) => p.expires > new Date() && p.revoked === false)\n\t\t\t.map((p) => p.permissions)\n\t\t\t.flat();\n\n\t\tconst acquiredPerms = [...perms, ...rolesPerms];\n\n\t\t// If the user has the ROOT permission, they have all permissions.\n\t\tif (acquiredPerms.includes('ROOT')) return true;\n\n\t\t// If the user has any of the required permissions, they have permission.\n\t\tif (acquiredPerms.some((p) => permsToValidate.includes(p))) return true;\n\n\t\t// Otherwise, they don't have permission.\n\t\treturn false;\n\t}\n}\n"],"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"}