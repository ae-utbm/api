{"file":"/Users/juknum/Documents/Code/AE/api/test/e2e/auth.test.ts","mappings":"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","names":[],"sources":["/Users/juknum/Documents/Code/AE/api/test/e2e/auth.test.ts"],"sourcesContent":["import type { Email } from '@types';\n\nimport { hashSync } from 'bcrypt';\nimport request from 'supertest';\n\nimport { UserPostDTO } from '@modules/auth/dto/register.dto';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n\tbirthdayInvalid,\n\temailAlreadyUsed,\n\temailAlreadyVerified,\n\temailInvalid,\n\temailInvalidToken,\n\temailNotFound,\n\tfieldMissing,\n\tfieldUnexpected,\n\tidInvalid,\n\tidOrEmailMissing,\n} from '@utils/responses';\n\nimport { orm, app, i18n } from '../base.setup';\n\ndescribe('AuthController (e2e)', () => {\n\tdescribe('/api/auth/login (POST)', () => {\n\t\tit('should return 400 when email/password is not provided', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ password: 'password' })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: idOrEmailMissing({ i18n, type: User }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 404 when user is not found', async () => {\n\t\t\tconst email: Email = 'doesnotexist@utbm.fr';\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email, password: '' })\n\t\t\t\t.expect(404);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Not Found',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tmessage: emailNotFound({ i18n, type: User, email }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 401 when password is incorrect', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email: 'ae.info@utbm.fr', password: '' })\n\t\t\t\t.expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Unauthorized',\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: 'Password mismatch',\n\t\t\t});\n\t\t});\n\n\t\tit('should return 201 when user is found and password is correct', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email: 'ae.info@utbm.fr', password: 'root' })\n\t\t\t\t.expect(201);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\ttoken: expect.any(String) as string,\n\t\t\t\tuser_id: expect.any(Number) as number,\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('/api/auth/register (POST)', () => {\n\t\tconst user: UserPostDTO = {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\temail: 'johndoe@domain.com',\n\t\t\tpassword: 'password',\n\t\t\tbirthday: new Date('2000-01-01'),\n\t\t};\n\n\t\tdescribe('checking the birthday', () => {\n\t\t\tit('should return 400 when birthday is in the future', async () => {\n\t\t\t\tconst tomorrow = new Date(Date.now() + 1000 * 60 * 60 * 24);\n\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, birthday: tomorrow })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: birthdayInvalid({ i18n, date: tomorrow }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when birthday is less than 13 years old', async () => {\n\t\t\t\tconst birthday = new Date(Date.now() - 1000 * 60 * 60 * 24 * 365 * 12);\n\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, birthday })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: birthdayInvalid({ i18n, date: birthday }),\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tdescribe('checking the email', () => {\n\t\t\tit('should return 400 when email is not valid', async () => {\n\t\t\t\tconst email = 'invalid';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailInvalid({ i18n, email: email as unknown as Email }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when email is blacklisted', async () => {\n\t\t\t\tconst email = 'user@utbm.fr';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailInvalid({ i18n, email: email as unknown as Email }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when email is already used', async () => {\n\t\t\t\tconst email: Email = 'ae.info@utbm.fr';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailAlreadyUsed({ i18n, email }),\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when one of required fields is not provided', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user, first_name: undefined })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: fieldMissing({ i18n, type: UserPostDTO, field: 'first_name' }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when one unexpected field is given', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user, never_gonna: 'give_you_up' })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: fieldUnexpected({ i18n, type: UserPostDTO, field: 'never_gonna' }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 201 when user is created', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user })\n\t\t\t\t.expect(201);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\tage: (() => {\n\t\t\t\t\tconst diff = Date.now() - user.birthday.getTime();\n\t\t\t\t\tconst age = new Date(diff);\n\t\t\t\t\treturn Math.abs(age.getUTCFullYear() - 1970);\n\t\t\t\t})(),\n\t\t\t\tbirthday: '2000-01-01T00:00:00.000Z',\n\t\t\t\tcreated_at: expect.any(String) as string,\n\t\t\t\temail: 'johndoe@domain.com',\n\t\t\t\temail_verified: false,\n\t\t\t\tfirst_name: 'John',\n\t\t\t\tfull_name: 'John Doe',\n\t\t\t\tid: expect.any(Number) as number,\n\t\t\t\tis_currently_subscribed: false,\n\t\t\t\tis_minor: false,\n\t\t\t\tlast_name: 'Doe',\n\t\t\t\tlogs: [],\n\t\t\t\tpermissions: [],\n\t\t\t\troles: [],\n\t\t\t\tsubscriptions: [],\n\t\t\t\tupdated_at: expect.any(String) as string,\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('/api/auth/confirm/:user_id/:token/:redirect_url? (GET)', () => {\n\t\t// Defined in the seeder class (unverified user)\n\t\tconst user_id = 2;\n\t\tconst token = 'token';\n\n\t\tit('should return 400 when user_id is not a number', async () => {\n\t\t\tconst fakeId = 'invalid';\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${fakeId}/${token}`).expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: idInvalid({ i18n, type: User, id: fakeId }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 401 when the token is invalid', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${user_id}/invalid_token`).expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Unauthorized',\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: emailInvalidToken({ i18n }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when email is already verified', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/1/anything`).expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: emailAlreadyVerified({ i18n, type: User }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 200 when email is verified', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${user_id}/${token}`).expect(200);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\tage: expect.any(Number) as number,\n\t\t\t\tbanner: null,\n\t\t\t\tbirthday: '2000-01-01T00:00:00.000Z',\n\t\t\t\tcreated_at: expect.any(String) as string,\n\t\t\t\tcursus: null,\n\t\t\t\temail: 'unverified@email.com',\n\t\t\t\temail_verified: true,\n\t\t\t\tfirst_name: 'unverified',\n\t\t\t\tfull_name: 'unverified user',\n\t\t\t\tgender: null,\n\t\t\t\tid: user_id,\n\t\t\t\tis_currently_subscribed: false,\n\t\t\t\tis_minor: false,\n\t\t\t\tlast_name: 'user',\n\t\t\t\tlast_seen: null,\n\t\t\t\tnickname: null,\n\t\t\t\tparent_contact: null,\n\t\t\t\tphone: null,\n\t\t\t\tpicture: null,\n\t\t\t\tpromotion: null,\n\t\t\t\tpronouns: null,\n\t\t\t\tsecondary_email: null,\n\t\t\t\tspecialty: null,\n\t\t\t\tsubscriber_account: null,\n\t\t\t\tupdated_at: expect.any(String) as string,\n\t\t\t});\n\t\t});\n\n\t\tit('should return 308 when redirect_url is provided', async () => {\n\t\t\t// Reset user email_verified to false (because of the previous test)\n\t\t\tconst em = orm.em.fork();\n\t\t\tconst user = await em.findOne(User, { id: user_id });\n\n\t\t\tuser.email_verified = false;\n\t\t\tuser.email_verification = hashSync(token, 10);\n\n\t\t\tawait em.persistAndFlush(user);\n\t\t\tem.clear();\n\t\t\t// --\n\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/auth/confirm/${user_id}/${token}/${encodeURIComponent('https://example.com')}`)\n\t\t\t\t.expect(308);\n\n\t\t\texpect((response.header as { location: string }).location).toEqual('https://example.com');\n\t\t});\n\t});\n});\n"],"version":3}