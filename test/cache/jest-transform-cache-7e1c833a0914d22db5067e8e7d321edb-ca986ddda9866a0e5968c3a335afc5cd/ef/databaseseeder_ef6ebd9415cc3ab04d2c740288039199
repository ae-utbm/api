abbba740b1a2368cdfea94f50f522e57
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseSeeder = void 0;
const seeder_1 = require("@mikro-orm/seeder");
const bcrypt_1 = require("bcrypt");
const permission_entity_1 = require("@modules/permissions/entities/permission.entity");
const promotion_entity_1 = require("@modules/promotions/entities/promotion.entity");
const user_visibility_entity_1 = require("@modules/users/entities/user-visibility.entity");
const user_entity_1 = require("@modules/users/entities/user.entity");
/**
 * This class is used to populate the database with some base data
 * (e.g. the root user)
 */
class DatabaseSeeder extends seeder_1.Seeder {
    async run(em) {
        const promotions = this.create_promotions(em);
        const users = this.create_users(em);
        const root = users.find((u) => u.email === 'ae.info@utbm.fr');
        const logs = users.find((u) => u.email === 'logs@email.com');
        // Assign permission to users
        const perms = [
            em.create(permission_entity_1.Permission, {
                name: 'ROOT',
                expires: new Date('9999-12-31'),
                user: root,
            }),
            em.create(permission_entity_1.Permission, {
                name: 'CAN_READ_LOGS_OF_USER',
                expires: new Date('9999-12-31'),
                user: logs,
            }),
            em.create(permission_entity_1.Permission, {
                name: 'CAN_DELETE_LOGS_OF_USER',
                expires: new Date('9999-12-31'),
                user: logs,
            }),
        ];
        // Assign promotion to users
        root.promotion = promotions.find((p) => p.number === 21);
        await em.persistAndFlush([...users, ...perms, ...promotions]);
    }
    create_promotions(em) {
        const res = [];
        const year = new Date().getFullYear();
        for (let i = 1; i <= year - 1998; i++) {
            res.push(em.create(promotion_entity_1.Promotion, { number: i }));
        }
        return res;
    }
    create_users(em) {
        const res = [];
        const users = [
            // Root user
            // > ROOT Permissions
            {
                email: 'ae.info@utbm.fr',
                email_verified: true,
                password: (0, bcrypt_1.hashSync)('root', 10),
                first_name: 'root',
                last_name: 'root',
                nickname: 'noot noot',
                birthday: new Date('2000-01-01'),
            },
            // Unverified user
            // > Email not verified
            {
                email: 'unverified@email.com',
                email_verified: false,
                email_verification: (0, bcrypt_1.hashSync)('token', 10),
                password: (0, bcrypt_1.hashSync)('root', 10),
                first_name: 'unverified',
                last_name: 'user',
                birthday: new Date('2000-01-01'),
            },
            // Unauthorized user
            // > No permissions (but email verified)
            {
                email: 'unauthorized@email.com',
                email_verified: true,
                password: (0, bcrypt_1.hashSync)('root', 10),
                first_name: 'unauthorized',
                last_name: 'user',
                birthday: new Date('2000-01-01'),
            },
            // Logs user
            // > CAN_READ_LOGS_OF_USER & CAN_DELETE_LOGS_OF_USER permissions
            {
                email: 'logs@email.com',
                email_verified: true,
                password: (0, bcrypt_1.hashSync)('root', 10),
                first_name: 'logs',
                last_name: 'moderator',
                birthday: new Date('2000-01-01'),
            },
        ];
        for (const user of users) {
            const u = em.create(user_entity_1.User, user);
            em.create(user_visibility_entity_1.UserVisibility, { user: u });
            res.push(u);
        }
        return res;
    }
}
exports.DatabaseSeeder = DatabaseSeeder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,