{"version":3,"names":["cov_ps7773lk9","actualCoverage","common_1","s","require","config_1","core_1","jwt_1","SelfGuard","exports","constructor","jwtService","configService","reflector","f","canActivate","context","checkSelf","__decorate","Injectable","JwtService","ConfigService","Reflector","request","switchToHttp","getRequest","userIdKey","get","getHandler","user_id","b","params","body","undefined","Error","bearerToken","headers","authorization","decodedToken","verify","replace","trim","secret","sub","parseInt"],"sources":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self.guard.ts"],"sourcesContent":["import type { JWTPayload } from '@types';\nimport type { Observable } from 'rxjs';\n\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'supertest';\n\n/**\n * Check if the authenticated user is the same as the user ID in the request\n *\n * **The user id parameter should be called `user_id`**\n * @example\n * UseGuards(SelfGuard)\n * async route(@param('user_id') user_id: string) {\n * // ...\n * }\n */\n@Injectable()\nexport class SelfGuard implements CanActivate {\n\tconstructor(\n\t\tprivate readonly jwtService: JwtService,\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly reflector: Reflector,\n\t) {}\n\n\tcanActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n\t\treturn checkSelf(context, this.jwtService, this.configService, this.reflector);\n\t}\n}\n\nexport function checkSelf(\n\tcontext: ExecutionContext,\n\tjwtService: JwtService,\n\tconfigService: ConfigService,\n\treflector: Reflector,\n): boolean {\n\ttype Req = Request & {\n\t\tparams: { [key: string]: string };\n\t\tbody: { [key: string]: string };\n\t\theaders: { authorization: string };\n\t};\n\n\t// Access the request object from the execution context\n\tconst request = context.switchToHttp().getRequest<Req>();\n\n\t// Access the name of the parameter that contains the user ID\n\tconst userIdKey = reflector.get<string>('guard_self_param_key', context.getHandler());\n\n\t// Extract the user ID from the request parameters or body\n\tconst user_id = request.params[userIdKey] ?? request.body[userIdKey];\n\tif (user_id === undefined) throw new Error(`The parameter ${userIdKey} is missing from the request.`);\n\n\t// Retrieve the authenticated user from the request's user object or session\n\tconst bearerToken = request.headers.authorization;\n\n\t// Verify and decode the JWT token to extract the user ID\n\tconst decodedToken = jwtService.verify<JWTPayload>(bearerToken.replace('Bearer', '').trim(), {\n\t\tsecret: configService.get<string>('auth.jwtKey'),\n\t});\n\n\t// Compare the authenticated user's ID with the ID from the request\n\treturn decodedToken.sub === parseInt(user_id, 10);\n}\n"],"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"}