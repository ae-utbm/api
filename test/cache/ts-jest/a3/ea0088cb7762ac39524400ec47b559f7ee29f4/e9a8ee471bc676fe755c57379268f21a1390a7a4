[["/Users/juknum/Documents/Code/AE/api/test/database.setup.ts",{"fileContent":"import 'tsconfig-paths/register';\n\nimport path from 'path';\n\nimport { MikroORM } from '@mikro-orm/core';\n\nimport { DatabaseSeeder } from '@database/seeders/database.seeder';\nimport config from '@mikro-orm.config';\n\n/**\n * This function is used to setup the database before running the tests.\n */\nasync function setup() {\n\tconst orm = await MikroORM.init({\n\t\t...config,\n\t\tdebug: false, // Hide debug logs for the database setup\n\t\t// Entities paths are relative to the root of the project so we need to update them\n\t\tentities: [path.join(__dirname, '../../dist/src/modules/**/*.entity.js')],\n\t\tentitiesTs: [path.join(__dirname, '../src/modules/**/*.entity.ts')],\n\t});\n\n\t// Drop and re-create the database schema\n\tconst generator = orm.getSchemaGenerator();\n\tawait generator.dropSchema();\n\tawait generator.createSchema();\n\n\t// Seed the database with some basic data\n\tconst seeder = orm.getSeeder();\n\tawait seeder.seed(DatabaseSeeder);\n\n\tawait orm.close(true);\n}\n\nexport default setup;\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/database/seeders/database.seeder.ts","/Users/juknum/Documents/Code/AE/api/src/mikro-orm.config.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/database/seeders/database.seeder.ts",{"fileContent":"import type { EntityManager } from '@mikro-orm/core';\n\nimport { Seeder } from '@mikro-orm/seeder';\nimport { hashSync } from 'bcrypt';\n\nimport { Permission } from '@modules/permissions/entities/permission.entity';\nimport { Promotion } from '@modules/promotions/entities/promotion.entity';\nimport { UserVisibility } from '@modules/users/entities/user-visibility.entity';\nimport { User } from '@modules/users/entities/user.entity';\n\n/**\n * This class is used to populate the database with some base data\n * (e.g. the root user)\n */\nexport class DatabaseSeeder extends Seeder {\n\tasync run(em: EntityManager): Promise<void> {\n\t\tconst promotions = this.create_promotions(em);\n\t\tconst users = this.create_users(em);\n\n\t\tconst root = users.find((u) => u.email === 'ae.info@utbm.fr');\n\t\tconst logs = users.find((u) => u.email === 'logs@email.com');\n\n\t\t// Assign permission to users\n\t\tconst perms = [\n\t\t\tem.create(Permission, {\n\t\t\t\tname: 'ROOT',\n\t\t\t\texpires: new Date('9999-12-31'),\n\t\t\t\tuser: root,\n\t\t\t}),\n\n\t\t\tem.create(Permission, {\n\t\t\t\tname: 'CAN_READ_LOGS_OF_USER',\n\t\t\t\texpires: new Date('9999-12-31'),\n\t\t\t\tuser: logs,\n\t\t\t}),\n\n\t\t\tem.create(Permission, {\n\t\t\t\tname: 'CAN_DELETE_LOGS_OF_USER',\n\t\t\t\texpires: new Date('9999-12-31'),\n\t\t\t\tuser: logs,\n\t\t\t}),\n\t\t];\n\n\t\t// Assign promotion to users\n\t\troot.promotion = promotions.find((p) => p.number === 21);\n\n\t\tawait em.persistAndFlush([...users, ...perms, ...promotions]);\n\t}\n\n\tcreate_promotions(em: EntityManager): Promotion[] {\n\t\tconst res: Promotion[] = [];\n\t\tconst year = new Date().getFullYear();\n\n\t\tfor (let i = 1; i <= year - 1998; i++) {\n\t\t\tres.push(em.create(Promotion, { number: i }));\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tcreate_users(em: EntityManager): User[] {\n\t\tconst res: User[] = [];\n\n\t\tconst users: Partial<User>[] = [\n\t\t\t// Root user\n\t\t\t// > ROOT Permissions\n\t\t\t{\n\t\t\t\temail: 'ae.info@utbm.fr',\n\t\t\t\temail_verified: true,\n\t\t\t\tpassword: hashSync('root', 10),\n\t\t\t\tfirst_name: 'root',\n\t\t\t\tlast_name: 'root',\n\t\t\t\tnickname: 'noot noot',\n\t\t\t\tbirthday: new Date('2000-01-01'),\n\t\t\t},\n\t\t\t// Unverified user\n\t\t\t// > Email not verified\n\t\t\t{\n\t\t\t\temail: 'unverified@email.com',\n\t\t\t\temail_verified: false,\n\t\t\t\temail_verification: hashSync('token', 10),\n\t\t\t\tpassword: hashSync('root', 10),\n\t\t\t\tfirst_name: 'unverified',\n\t\t\t\tlast_name: 'user',\n\t\t\t\tbirthday: new Date('2000-01-01'),\n\t\t\t},\n\t\t\t// Unauthorized user\n\t\t\t// > No permissions (but email verified)\n\t\t\t{\n\t\t\t\temail: 'unauthorized@email.com',\n\t\t\t\temail_verified: true,\n\t\t\t\tpassword: hashSync('root', 10),\n\t\t\t\tfirst_name: 'unauthorized',\n\t\t\t\tlast_name: 'user',\n\t\t\t\tbirthday: new Date('2000-01-01'),\n\t\t\t},\n\t\t\t// Logs user\n\t\t\t// > CAN_READ_LOGS_OF_USER & CAN_DELETE_LOGS_OF_USER permissions\n\t\t\t{\n\t\t\t\temail: 'logs@email.com',\n\t\t\t\temail_verified: true,\n\t\t\t\tpassword: hashSync('root', 10),\n\t\t\t\tfirst_name: 'logs',\n\t\t\t\tlast_name: 'moderator',\n\t\t\t\tbirthday: new Date('2000-01-01'),\n\t\t\t},\n\t\t];\n\n\t\tfor (const user of users) {\n\t\t\tconst u = em.create(User, user);\n\t\t\tem.create(UserVisibility, { user: u });\n\t\t\tres.push(u);\n\t\t}\n\n\t\treturn res;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts",{"fileContent":"import type { PermissionEntity, PermissionName } from '@types';\n\nimport { Entity, ManyToOne, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\n@Entity({ tableName: 'permissions' })\nexport class Permission extends BaseEntity implements PermissionEntity<User> {\n\t@Property()\n\t@ApiProperty({ enum: PERMISSIONS_NAMES })\n\tname: PermissionName;\n\n\t@Property({ name: 'is_revoked', onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\trevoked = false;\n\n\t@Property({ name: 'expires_at' })\n\t@ApiProperty()\n\texpires: Date;\n\n\t@ManyToOne(() => User, { onDelete: 'cascade', joinColumn: 'user_id' })\n\t@ApiProperty({ type: Number })\n\tuser: User;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts",{"fileContent":"import type { BaseEntity as BEI } from '@types';\n\nimport { BaseEntity as BE, Entity, PrimaryKey, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Base entity used for all entities,\n * containing the primary key and the creation and update dates\n */\n@Entity({ abstract: true })\nexport abstract class BaseEntity extends BE<BaseEntity, 'id'> implements BEI {\n\t@PrimaryKey()\n\t@ApiProperty({ minimum: 1 })\n\tid: number;\n\n\t@Property({ type: 'date', onCreate: () => new Date() })\n\t@ApiProperty({ type: Date })\n\tcreated_at = new Date();\n\n\t@Property({ type: 'date', onCreate: () => new Date(), onUpdate: () => new Date() })\n\t@ApiProperty({ type: Date })\n\tupdated_at = new Date();\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts",{"fileContent":"import type { UserEntity, Email } from '@types';\n\nimport {\n\tCascade,\n\tCollection,\n\tEntity,\n\tEntityDTO,\n\tManyToMany,\n\tManyToOne,\n\tOneToMany,\n\tOneToOne,\n\tProperty,\n} from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { Log } from '@modules/logs/entities/log.entity';\nimport { Permission } from '@modules/permissions/entities/permission.entity';\nimport { Promotion } from '@modules/promotions/entities/promotion.entity';\nimport { Role } from '@modules/roles/entities/role.entity';\nimport { Subscription } from '@modules/subscription/entities/subscription.entity';\n\nimport { UserBanner } from './user-banner.entity';\nimport { UserPicture } from './user-picture.entity';\n\n@Entity({ tableName: 'users' })\nexport class User\n\textends BaseEntity\n\timplements UserEntity<UserPicture, UserBanner, Promotion, Permission, Role, Subscription, Log>\n{\n\t//* INFORMATIONS\n\t/** The first name of the user, @example 'John' */\n\t@Property()\n\t@ApiProperty()\n\tfirst_name: string;\n\n\t/** The last name of the user, @example 'Doe' */\n\t@Property()\n\t@ApiProperty()\n\tlast_name: string;\n\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\temail_verified = false;\n\n\t@Property({ nullable: true, hidden: true })\n\temail_verification?: string;\n\n\t/** Get the full name of the user */\n\t@Property({ persist: false })\n\t@ApiProperty()\n\tget full_name(): string {\n\t\treturn `${this.first_name} ${this.last_name}`;\n\t}\n\n\t/** The user profile picture */\n\t@OneToOne(() => UserPicture, (picture) => picture.user, { cascade: [Cascade.ALL], nullable: true })\n\t@ApiProperty()\n\tpicture?: UserPicture;\n\n\t/** The user profile banner */\n\t@OneToOne(() => UserBanner, (banner) => banner.user, { cascade: [Cascade.ALL], nullable: true })\n\t@ApiProperty()\n\tbanner?: UserBanner;\n\n\t/** The main email of the user, used to login, @example 'example@domain.net' */\n\t@Property({ unique: true, type: String })\n\t@ApiProperty({ type: String })\n\temail: Email;\n\n\t/** The encrypted user password */\n\t@Property({ hidden: true })\n\tpassword: string;\n\n\t/** The birthday of the user */\n\t@Property({ type: 'date' })\n\t@ApiProperty()\n\tbirthday: Date;\n\n\t/** The age of the user */\n\t@Property({ persist: false })\n\t@ApiProperty()\n\tget age(): number {\n\t\tconst diff = Date.now() - this.birthday.getTime();\n\t\tconst age = new Date(diff);\n\t\treturn Math.abs(age.getUTCFullYear() - 1970);\n\t}\n\n\t/** True if the user is minor */\n\t@Property({ persist: false })\n\t@ApiProperty()\n\tget is_minor(): boolean {\n\t\treturn this.age < 18;\n\t}\n\n\t/** The nickname of the user, @example 'fenshmirtz' // + Doe => Doofenshmirtz */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tnickname?: string;\n\n\t/** Gender of the user */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tgender?: string;\n\n\t/** The pronouns of the user */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tpronouns?: string;\n\n\t/** Cursus of the user within the school */\n\t// TODO: use an entity relation ?\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tcursus?: string;\n\n\t/** Specialty of the user */\n\t// TODO: use an entity relation ?\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tspecialty?: string;\n\n\t/** Promotion of the user */\n\t@ManyToOne(() => Promotion, { nullable: true })\n\t@ApiProperty({ type: Number })\n\tpromotion?: Promotion;\n\n\t/** The last time the user was seen online (JWT Token generated) */\n\t@Property({ type: 'date', nullable: true })\n\t@ApiProperty()\n\tlast_seen?: Date;\n\n\t//* SUBSCRIPTIONS\n\t/** The subscription of the user */\n\t@OneToMany(() => Subscription, (subscription) => subscription.user, {\n\t\tcascade: [Cascade.REMOVE],\n\t\tnullable: true,\n\t\torphanRemoval: true,\n\t})\n\tsubscriptions?: Collection<Subscription>;\n\n\t/** Subscriber account number, undefined if he never subscribed */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tsubscriber_account?: string;\n\n\t/** The current subscription of the user */\n\t@Property({ persist: false })\n\tget current_subscription(): EntityDTO<Subscription> | undefined {\n\t\treturn this.subscriptions.toArray().find((subscription) => subscription.is_active);\n\t}\n\n\t/** True if the user is currently subscribed */\n\t@Property({ persist: false })\n\t@ApiProperty()\n\tget is_currently_subscribed(): boolean {\n\t\treturn this.current_subscription !== undefined;\n\t}\n\n\t//* CONTACT\n\t/** The secondary email of the user, used for communications emails */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tsecondary_email?: string;\n\n\t/** The phone number of the user */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tphone?: string;\n\n\t/** Parent contact (for minors only) */\n\t@Property({ nullable: true })\n\t@ApiProperty()\n\tparent_contact?: string;\n\n\t//* PERMISSIONS & AUTHENTIFICATION\n\t/** Linked permissions to the user */\n\t@OneToMany(() => Permission, (permission) => permission.user, { cascade: [Cascade.REMOVE], orphanRemoval: true })\n\tpermissions = new Collection<Permission>(this);\n\n\t/** Linked roles to the user */\n\t@ManyToMany(() => Role, (role) => role.users)\n\troles = new Collection<Role>(this);\n\n\t@OneToMany(() => Log, (log) => log.user, { cascade: [Cascade.REMOVE], orphanRemoval: true })\n\tlogs = new Collection<Log>(this);\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts",{"fileContent":"import type { LogEntity } from '@types';\n\nimport { Entity, ManyToOne, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { User } from '@modules/users/entities/user.entity';\n\n@Entity({ tableName: 'logs' })\nexport class Log extends BaseEntity implements LogEntity<User> {\n\t@ManyToOne()\n\t@ApiProperty({ type: Number })\n\tuser: User;\n\n\t@Property()\n\t@ApiProperty()\n\taction: string;\n\n\t@Property()\n\t@ApiProperty()\n\tip: string;\n\n\t@Property()\n\t@ApiProperty()\n\tuser_agent: string;\n\n\t@Property()\n\t@ApiProperty()\n\troute: string;\n\n\t@Property()\n\t@ApiProperty()\n\tmethod: string;\n\n\t@Property()\n\t@ApiProperty()\n\tbody: string;\n\n\t@Property()\n\t@ApiProperty()\n\tquery: string;\n\n\t@Property()\n\t@ApiProperty()\n\tparams: string;\n\n\t@Property()\n\t@ApiProperty({ required: false })\n\tresponse?: string;\n\n\t@Property()\n\t@ApiProperty({ required: false })\n\tstatus_code?: number;\n\n\t@Property({ nullable: true })\n\t@ApiProperty({ required: false })\n\terror?: string;\n\n\t@Property({ nullable: true })\n\t@ApiProperty({ required: false })\n\terror_stack?: string;\n\n\t@Property({ nullable: true })\n\t@ApiProperty({ required: false })\n\terror_message?: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts",{"fileContent":"import type { PromotionEntity } from '@types';\n\nimport { Cascade, Collection, Entity, OneToMany, OneToOne, Property } from '@mikro-orm/core';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { User } from '@modules/users/entities/user.entity';\n\nimport { PromotionPicture } from './promotion-picture.entity';\n\n@Entity({ tableName: 'promotions' })\nexport class Promotion extends BaseEntity implements PromotionEntity<PromotionPicture, User> {\n\t@Property()\n\tnumber: number;\n\n\t@OneToMany(() => User, (user) => user.promotion, { cascade: [Cascade.REMOVE] })\n\tusers: Collection<User>;\n\n\t@OneToOne(() => PromotionPicture, (picture) => picture.promotion, { cascade: [Cascade.ALL], nullable: true })\n\tpicture?: PromotionPicture;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts",{"fileContent":"import type { PromotionPictureEntity } from '@types';\n\nimport { Entity, OneToOne } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { FileEntity } from '@modules/_mixin/entities/file.entity';\n\nimport { Promotion } from './promotion.entity';\n\n@Entity({ tableName: 'promotions_pictures' })\nexport class PromotionPicture extends FileEntity implements PromotionPictureEntity<Promotion> {\n\t@ApiProperty({ type: () => Number })\n\t@OneToOne(() => Promotion, (promotion) => promotion.picture, { owner: true, unique: true })\n\tpromotion: Promotion;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts",{"fileContent":"import type { FileEntity as FE, VISIBILITY } from '@types';\n\nimport { Entity, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from './base.entity';\n\n@Entity({ abstract: true })\nexport abstract class FileEntity extends BaseEntity implements FE {\n\t@Property()\n\t@ApiProperty()\n\tfilename: string;\n\n\t@Property()\n\t@ApiProperty()\n\tmimetype: string;\n\n\t@Property({ hidden: true })\n\tpath: string;\n\n\t@Property()\n\t@ApiProperty()\n\tsize: number;\n\n\t@Property()\n\t@ApiProperty({ enum: ['public', 'private', 'hidden'] })\n\tvisibility: VISIBILITY;\n\n\t@Property({ nullable: true })\n\t@ApiProperty({ required: false })\n\tdescription?: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts",{"fileContent":"import type { PermissionName, RoleEntity } from '@types';\n\nimport { Collection, Entity, ManyToMany, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { Permission } from '@modules/permissions/entities/permission.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\n/**\n * Entity used to store roles, which are a collection of permissions\n */\n@Entity({ tableName: 'roles' })\nexport class Role extends BaseEntity implements RoleEntity<Permission, User> {\n\t/** Name of the role, in caps */\n\t@Property({ unique: true })\n\t@ApiProperty({ type: String, example: 'AE_ADMIN' })\n\tname: Uppercase<string>;\n\n\t/** Determine wether the role is still active */\n\t@Property({ name: 'is_revoked', onCreate: () => false })\n\t@ApiProperty({ type: Boolean, default: false })\n\trevoked = false;\n\n\t/** Specify when the role should expires */\n\t@Property({ name: 'expires_at' })\n\t@ApiProperty()\n\texpires: Date;\n\n\t/** Specify what permissions the role has */\n\t@Property({ name: 'permissions' })\n\t@ApiProperty({ enum: PERMISSIONS_NAMES, isArray: true })\n\tpermissions: PermissionName[];\n\n\t/** Specify to which user the role is attached */\n\t@ManyToMany(() => User, (user) => user.roles, { owner: true })\n\tusers = new Collection<User>(this);\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts",{"fileContent":"import type { PermissionName } from '.';\n\n/**\n * This file contains all the permissions available in the API.\n *! Please note that permissions are not stored in the database, they are hardcoded.\n */\nexport const PERMISSIONS = [\n\t{\n\t\tname: 'ROOT',\n\t\tdescription: 'As access to everything',\n\t},\n\n\t// LOGS\n\t{\n\t\tname: 'CAN_READ_LOGS_OF_USER',\n\t\tdescription: 'Can read logs of users',\n\t},\n\t{\n\t\tname: 'CAN_DELETE_LOGS_OF_USER',\n\t\tdescription: 'Can delete logs of users',\n\t},\n\n\t// PERMISSIONS\n\t{\n\t\tname: 'CAN_EDIT_PERMISSIONS_OF_USER',\n\t\tdescription: 'Can assign/remove permissions of users',\n\t},\n\t{\n\t\tname: 'CAN_EDIT_PERMISSIONS_OF_ROLE',\n\t\tdescription: 'Can assign/remove permissions of existing roles',\n\t},\n\t{\n\t\tname: 'CAN_READ_PERMISSIONS_OF_USER',\n\t\tdescription: 'Can read permissions users',\n\t},\n\t{\n\t\tname: 'CAN_READ_PERMISSIONS_OF_ROLE',\n\t\tdescription: 'Can read permissions roles',\n\t},\n\n\t// ROLES\n\t{\n\t\tname: 'CAN_EDIT_ROLE',\n\t\tdescription: 'Can edit/create roles',\n\t},\n\t{\n\t\tname: 'CAN_READ_ROLE',\n\t\tdescription: 'Can read all roles that exist',\n\t},\n\n\t// USERS\n\t{\n\t\tname: 'CAN_EDIT_USER',\n\t\tdescription: 'Can create a new user or edit an existing one',\n\t},\n\t{\n\t\tname: 'CAN_DELETE_USER',\n\t\tdescription: 'Can delete users',\n\t},\n\t{\n\t\tname: 'CAN_READ_USER',\n\t\tdescription: 'Can read filtered information of users',\n\t},\n\t{\n\t\tname: 'CAN_READ_USER_PRIVATE',\n\t\tdescription: 'Can read all information of users',\n\t},\n\n\t// PROMOTIONS\n\t{\n\t\tname: 'CAN_READ_PROMOTION',\n\t\tdescription: \"Can read a promotion's information\",\n\t},\n\t{\n\t\tname: 'CAN_EDIT_PROMOTION',\n\t\tdescription: 'Can edit a promotion (name, description, etc.)',\n\t},\n] as const;\n\nexport const PERMISSIONS_NAMES: PermissionName[] = PERMISSIONS.map((p) => p.name);\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/entity.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/dto.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts",{"fileContent":"import type { SubscriptionEntity } from '@types';\n\nimport { Entity, ManyToOne, Property } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\nimport { User } from '@modules/users/entities/user.entity';\n\n@Entity({ tableName: 'subscriptions' })\nexport class Subscription extends BaseEntity implements SubscriptionEntity<User> {\n\t@ManyToOne(() => User, { onDelete: 'cascade', joinColumn: 'user_id' })\n\t@ApiProperty({ type: Number })\n\tuser: User;\n\n\t@Property()\n\t@ApiProperty()\n\tplan: string;\n\n\t@Property({ type: 'date' })\n\t@ApiProperty()\n\texpires: Date;\n\n\t/** Determine if the subscription is still active by comparing current date with the subscription date */\n\t@Property({ persist: false })\n\tget is_active(): boolean {\n\t\treturn this.expires > new Date();\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts",{"fileContent":"import type { UserBannerEntity } from '@types';\n\nimport { Entity, OneToOne } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { FileEntity } from '@modules/_mixin/entities/file.entity';\n\nimport { User } from './user.entity';\n\n@Entity({ tableName: 'users_banners' })\nexport class UserBanner extends FileEntity implements UserBannerEntity<User> {\n\t@ApiProperty({ type: Number, minimum: 1 })\n\t@OneToOne(() => User, (user) => user.banner, { owner: true, unique: true })\n\tuser: User;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts",{"fileContent":"import type { UserPictureEntity } from '@types';\n\nimport { Entity, OneToOne } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { FileEntity } from '@modules/_mixin/entities/file.entity';\n\nimport { User } from './user.entity';\n\n@Entity({ tableName: 'users_pictures' })\nexport class UserPicture extends FileEntity implements UserPictureEntity<User> {\n\t@ApiProperty({ type: Number, minimum: 1 })\n\t@OneToOne(() => User, (user) => user.picture, { owner: true, unique: true })\n\tuser: User;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts",{"fileContent":"import type { UserVisibilityEntity } from '@types';\n\nimport { Entity, Property, OneToOne } from '@mikro-orm/core';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseEntity } from '@modules/_mixin/entities/base.entity';\n\nimport { User } from './user.entity';\n\n@Entity({ tableName: 'users_visibility' })\nexport class UserVisibility extends BaseEntity implements UserVisibilityEntity<User> {\n\t/** Specify to which user those parameters belongs */\n\t@OneToOne(() => User, { onDelete: 'cascade', joinColumn: 'user_id' })\n\t@ApiProperty({ type: Number })\n\tuser: User;\n\n\t/** Wether the user email should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\temail = false;\n\n\t/** Wether the user email should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\tsecondary_email = false;\n\n\t/** Wether the user birthday should be visible or not */\n\t@Property({ onCreate: () => true })\n\t@ApiProperty({ type: Boolean })\n\tbirthday = true;\n\n\t/** Wether the user nickname should be visible or not */\n\t@Property({ onCreate: () => true })\n\t@ApiProperty({ type: Boolean })\n\tnickname = true;\n\n\t/** Wether the user gender should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\tgender = false;\n\n\t/** Wether the user gender should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\tpronouns = false;\n\n\t/** Wether the user cursus should be visible or not */\n\t@Property({ onCreate: () => true })\n\t@ApiProperty({ type: Boolean })\n\tcursus = true;\n\n\t/** Wether the user cursus should be visible or not */\n\t@Property({ onCreate: () => true })\n\t@ApiProperty({ type: Boolean })\n\tspecialty = true;\n\n\t/** Wether the user promotion should be visible or not */\n\t@Property({ onCreate: () => true })\n\t@ApiProperty({ type: Boolean })\n\tpromotion = true;\n\n\t/** Wether the user phone should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\tphone = false;\n\n\t/** Wether the user parent's contact should be visible or not */\n\t@Property({ onCreate: () => false })\n\t@ApiProperty({ type: Boolean })\n\tparent_contact = false;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/mikro-orm.config.ts",{"fileContent":"import { MikroORMOptions, IDatabaseDriver, Connection } from '@mikro-orm/core';\nimport { PostgreSqlDriver } from '@mikro-orm/postgresql';\nimport { TsMorphMetadataProvider } from '@mikro-orm/reflection';\nimport { SqlHighlighter } from '@mikro-orm/sql-highlighter';\nimport { Logger } from '@nestjs/common';\n\nimport 'dotenv/config';\n\nconst logger = new Logger('MikroORM');\n\n/**\n * Global MikroORM configuration\n */\nconst config: Partial<MikroORMOptions<IDatabaseDriver<Connection>>> = {\n\tdriver: PostgreSqlDriver,\n\tdbName: process.env['DB_NAME'] ?? 'ae_test',\n\tport: parseInt(process.env['DB_PORT'], 10) ?? 5432,\n\thost: process.env['DB_HOST'] ?? 'localhost',\n\tuser: process.env['DB_USER'] ?? 'postgres',\n\tpassword: process.env['DB_PASSWORD'] ?? 'postgres',\n\tdebug: process.env['DEBUG'] === 'true',\n\tentities: ['./dist/modules/**/entities/*.entity.js'],\n\tentitiesTs: ['./src/modules/**/entities/*.entity.ts'],\n\thighlighter: new SqlHighlighter(),\n\tmigrations: {\n\t\ttransactional: true,\n\t\tpath: './dist/database/migrations',\n\t\tpathTs: './src/database/migrations',\n\t\tglob: '!(*.d).{js,ts}',\n\t},\n\tseeder: {\n\t\tdefaultSeeder: 'DatabaseSeeder',\n\t\tpath: './dist/database/seeders',\n\t\tpathTs: './src/database/seeders',\n\t\tglob: '!(*.d).{js,ts}',\n\t},\n\tlogger: logger.log.bind(logger) as MikroORMOptions<IDatabaseDriver<Connection>>['logger'],\n\tmetadataProvider: TsMorphMetadataProvider,\n};\n\nexport default config;\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/test/e2e/auth.test.ts",{"fileContent":"import type { Email } from '@types';\n\nimport { hashSync } from 'bcrypt';\nimport request from 'supertest';\n\nimport { UserPostDTO } from '@modules/auth/dto/register.dto';\nimport { User } from '@modules/users/entities/user.entity';\nimport {\n\tbirthdayInvalid,\n\temailAlreadyUsed,\n\temailAlreadyVerified,\n\temailInvalid,\n\temailInvalidToken,\n\temailNotFound,\n\tfieldMissing,\n\tfieldUnexpected,\n\tidInvalid,\n\tidOrEmailMissing,\n} from '@utils/responses';\n\nimport { orm, app, i18n } from '../base.setup';\n\ndescribe('AuthController (e2e)', () => {\n\tdescribe('/api/auth/login (POST)', () => {\n\t\tit('should return 400 when email/password is not provided', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ password: 'password' })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: idOrEmailMissing({ i18n, type: User }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 404 when user is not found', async () => {\n\t\t\tconst email: Email = 'doesnotexist@utbm.fr';\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email, password: '' })\n\t\t\t\t.expect(404);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Not Found',\n\t\t\t\tstatusCode: 404,\n\t\t\t\tmessage: emailNotFound({ i18n, type: User, email }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 401 when password is incorrect', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email: 'ae.info@utbm.fr', password: '' })\n\t\t\t\t.expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Unauthorized',\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: 'Password mismatch',\n\t\t\t});\n\t\t});\n\n\t\tit('should return 201 when user is found and password is correct', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/login')\n\t\t\t\t.send({ email: 'ae.info@utbm.fr', password: 'root' })\n\t\t\t\t.expect(201);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\ttoken: expect.any(String) as string,\n\t\t\t\tuser_id: expect.any(Number) as number,\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('/api/auth/register (POST)', () => {\n\t\tconst user: UserPostDTO = {\n\t\t\tfirst_name: 'John',\n\t\t\tlast_name: 'Doe',\n\t\t\temail: 'johndoe@domain.com',\n\t\t\tpassword: 'password',\n\t\t\tbirthday: new Date('2000-01-01'),\n\t\t};\n\n\t\tdescribe('checking the birthday', () => {\n\t\t\tit('should return 400 when birthday is in the future', async () => {\n\t\t\t\tconst tomorrow = new Date(Date.now() + 1000 * 60 * 60 * 24);\n\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, birthday: tomorrow })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: birthdayInvalid({ i18n, date: tomorrow }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when birthday is less than 13 years old', async () => {\n\t\t\t\tconst birthday = new Date(Date.now() - 1000 * 60 * 60 * 24 * 365 * 12);\n\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, birthday })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: birthdayInvalid({ i18n, date: birthday }),\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tdescribe('checking the email', () => {\n\t\t\tit('should return 400 when email is not valid', async () => {\n\t\t\t\tconst email = 'invalid';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailInvalid({ i18n, email: email as unknown as Email }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when email is blacklisted', async () => {\n\t\t\t\tconst email = 'user@utbm.fr';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailInvalid({ i18n, email: email as unknown as Email }),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tit('should return 400 when email is already used', async () => {\n\t\t\t\tconst email: Email = 'ae.info@utbm.fr';\n\t\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t\t.post('/api/auth/register')\n\t\t\t\t\t.send({ ...user, email })\n\t\t\t\t\t.expect(400);\n\n\t\t\t\texpect(response.body).toEqual({\n\t\t\t\t\terror: 'Bad Request',\n\t\t\t\t\tstatusCode: 400,\n\t\t\t\t\tmessage: emailAlreadyUsed({ i18n, email }),\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when one of required fields is not provided', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user, first_name: undefined })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: fieldMissing({ i18n, type: UserPostDTO, field: 'first_name' }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when one unexpected field is given', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user, never_gonna: 'give_you_up' })\n\t\t\t\t.expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: fieldUnexpected({ i18n, type: UserPostDTO, field: 'never_gonna' }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 201 when user is created', async () => {\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.post('/api/auth/register')\n\t\t\t\t.send({ ...user })\n\t\t\t\t.expect(201);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\tage: (() => {\n\t\t\t\t\tconst diff = Date.now() - user.birthday.getTime();\n\t\t\t\t\tconst age = new Date(diff);\n\t\t\t\t\treturn Math.abs(age.getUTCFullYear() - 1970);\n\t\t\t\t})(),\n\t\t\t\tbirthday: '2000-01-01T00:00:00.000Z',\n\t\t\t\tcreated_at: expect.any(String) as string,\n\t\t\t\temail: 'johndoe@domain.com',\n\t\t\t\temail_verified: false,\n\t\t\t\tfirst_name: 'John',\n\t\t\t\tfull_name: 'John Doe',\n\t\t\t\tid: expect.any(Number) as number,\n\t\t\t\tis_currently_subscribed: false,\n\t\t\t\tis_minor: false,\n\t\t\t\tlast_name: 'Doe',\n\t\t\t\tlogs: [],\n\t\t\t\tpermissions: [],\n\t\t\t\troles: [],\n\t\t\t\tsubscriptions: [],\n\t\t\t\tupdated_at: expect.any(String) as string,\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('/api/auth/confirm/:user_id/:token/:redirect_url? (GET)', () => {\n\t\t// Defined in the seeder class (unverified user)\n\t\tconst user_id = 2;\n\t\tconst token = 'token';\n\n\t\tit('should return 400 when user_id is not a number', async () => {\n\t\t\tconst fakeId = 'invalid';\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${fakeId}/${token}`).expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: idInvalid({ i18n, type: User, id: fakeId }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 401 when the token is invalid', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${user_id}/invalid_token`).expect(401);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Unauthorized',\n\t\t\t\tstatusCode: 401,\n\t\t\t\tmessage: emailInvalidToken({ i18n }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 400 when email is already verified', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/1/anything`).expect(400);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\terror: 'Bad Request',\n\t\t\t\tstatusCode: 400,\n\t\t\t\tmessage: emailAlreadyVerified({ i18n, type: User }),\n\t\t\t});\n\t\t});\n\n\t\tit('should return 200 when email is verified', async () => {\n\t\t\tconst response = await request(app.getHttpServer()).get(`/api/auth/confirm/${user_id}/${token}`).expect(200);\n\n\t\t\texpect(response.body).toEqual({\n\t\t\t\tage: expect.any(Number) as number,\n\t\t\t\tbanner: null,\n\t\t\t\tbirthday: '2000-01-01T00:00:00.000Z',\n\t\t\t\tcreated_at: expect.any(String) as string,\n\t\t\t\tcursus: null,\n\t\t\t\temail: 'unverified@email.com',\n\t\t\t\temail_verified: true,\n\t\t\t\tfirst_name: 'unverified',\n\t\t\t\tfull_name: 'unverified user',\n\t\t\t\tgender: null,\n\t\t\t\tid: user_id,\n\t\t\t\tis_currently_subscribed: false,\n\t\t\t\tis_minor: false,\n\t\t\t\tlast_name: 'user',\n\t\t\t\tlast_seen: null,\n\t\t\t\tnickname: null,\n\t\t\t\tparent_contact: null,\n\t\t\t\tphone: null,\n\t\t\t\tpicture: null,\n\t\t\t\tpromotion: null,\n\t\t\t\tpronouns: null,\n\t\t\t\tsecondary_email: null,\n\t\t\t\tspecialty: null,\n\t\t\t\tsubscriber_account: null,\n\t\t\t\tupdated_at: expect.any(String) as string,\n\t\t\t});\n\t\t});\n\n\t\tit('should return 308 when redirect_url is provided', async () => {\n\t\t\t// Reset user email_verified to false (because of the previous test)\n\t\t\tconst em = orm.em.fork();\n\t\t\tconst user = await em.findOne(User, { id: user_id });\n\n\t\t\tuser.email_verified = false;\n\t\t\tuser.email_verification = hashSync(token, 10);\n\n\t\t\tawait em.persistAndFlush(user);\n\t\t\tem.clear();\n\t\t\t// --\n\n\t\t\tconst response = await request(app.getHttpServer())\n\t\t\t\t.get(`/api/auth/confirm/${user_id}/${token}/${encodeURIComponent('https://example.com')}`)\n\t\t\t\t.expect(308);\n\n\t\t\texpect((response.header as { location: string }).location).toEqual('https://example.com');\n\t\t});\n\t});\n});\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/test/base.setup.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/app.module.ts","/Users/juknum/Documents/Code/AE/api/src/env.ts","/Users/juknum/Documents/Code/AE/api/src/mikro-orm.config.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts",{"fileContent":"import type { UserPostDto, Email } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsEmail, IsString, IsStrongPassword } from 'class-validator';\n\nexport class UserPostByAdminDTO implements Omit<UserPostDto, 'password'> {\n\t@ApiProperty()\n\t@IsEmail()\n\temail: Email;\n\n\t@ApiProperty()\n\t@IsDate()\n\tbirthday: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\tfirst_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tlast_name: string;\n}\n\nexport class UserPostDTO extends UserPostByAdminDTO implements UserPostDto {\n\t@ApiProperty()\n\t@IsStrongPassword()\n\tpassword: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts",{"fileContent":"import type { Class, Email, I18nTranslations } from '@types';\n\nimport { PathImpl2 } from '@nestjs/config';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\nfunction generic(\n\tkey: PathImpl2<I18nTranslations>,\n\targs: Record<string, unknown>,\n\ti18n: I18nService<I18nTranslations>,\n): string {\n\treturn i18n.t(key, {\n\t\tlang: I18nContext.current()?.lang ?? undefined, // undefined -> fallback language\n\t\targs,\n\t});\n}\n\ninterface Response {\n\t/** The i18n Service used to translate the response */\n\ti18n: I18nService<I18nTranslations>;\n}\n\ninterface NamedResponse<T> extends Response {\n\t/** The object concerned by the translation */\n\ttype: Class<T>;\n}\n\n///* ERRORS *///\n/**\n * Get the translated error for an invalid payload\n * @returns {string} The translated error\n */\nexport const authInvalidPayload = (options: Response): string =>\n\tgeneric('responses.errors.auth.invalid_payload', {}, options.i18n);\n\n/**\n * Get the translated error for an invalid ID\n * @returns {string} The translated error\n */\nexport const idInvalid = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a not found ID\n * @returns {string} The translated error\n */\nexport const idNotFound = <T>(options: NamedResponse<T> & { id: string | number }): string =>\n\tgeneric('responses.errors.id.invalid', { type: options.type.name, id: options.id }, options.i18n);\n\n/**\n * Get the translated error for a missing ID\n * @returns {string} The translated error\n */\nexport const idOrEmailMissing = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.id_or_email.missing', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email\n * @returns {string} The translated error\n */\nexport const emailInvalid = (options: Response & { email: Email }): string =>\n\tgeneric('responses.errors.email.invalid', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already used email\n * @returns {string} The translated error\n */\nexport const emailAlreadyUsed = (options: Response & { email: string }): string =>\n\tgeneric('responses.errors.email.used', { email: options.email }, options.i18n);\n\n/**\n * Get the translated error for a not found email\n * @returns {string} The translated error\n */\nexport const emailNotFound = <T>(options: NamedResponse<T> & { email: string }): string =>\n\tgeneric('responses.errors.email.not_found', { type: options.type.name, email: options.email }, options.i18n);\n\n/**\n * Get the translated error for an already verified email\n * @returns {string} The translated error\n */\nexport const emailAlreadyVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.verified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an unverified email\n * @returns {string} The translated error\n */\nexport const emailNotVerified = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.errors.email.unverified', { type: options.type.name }, options.i18n);\n\n/**\n * Get the translated error for an invalid email token\n * @returns {string} The translated error\n */\nexport const emailInvalidToken = (options: Response): string =>\n\tgeneric('responses.errors.email.token.invalid', {}, options.i18n);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const birthdayInvalid = (options: Response & { date: Date | string }): string =>\n\tgeneric(\n\t\t'responses.errors.birthday.invalid',\n\t\t{ date: typeof options.date === 'string' ? options.date : options.date.toISOString() },\n\t\toptions.i18n,\n\t);\n\n/**\n * Get the translated error for an expired email token\n * @returns {string} The translated error\n */\nexport const fieldMissing = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.missing', { type: options.type.name, field: options.field }, options.i18n);\n\n/**\n * Get the translated error for an unexpected field\n * @returns {string} The translated error\n */\nexport const fieldUnexpected = <T>(options: NamedResponse<T> & { field: unknown }): string =>\n\tgeneric('responses.errors.field.unexpected', { type: options.type.name, field: options.field }, options.i18n);\n\n///* SUCCESS *///\n/**\n * Translate the success message for a delete operation\n * @returns {string} The translated success message\n */\nexport const deleteSuccess = <T>(options: NamedResponse<T>): string =>\n\tgeneric('responses.success.deleted', { type: options.type.name }, options.i18n);\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/test/base.setup.ts",{"fileContent":"import type { I18nTranslations } from '@types';\n\nimport 'tsconfig-paths/register';\nimport path from 'path';\n\nimport { MikroORM } from '@mikro-orm/core';\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { TestingModule, Test } from '@nestjs/testing';\nimport { AcceptLanguageResolver, I18nModule, I18nService } from 'nestjs-i18n';\n\nimport { AppModule } from '@app.module';\nimport env from '@env';\nimport config from '@mikro-orm.config';\n\nlet i18n: I18nService<I18nTranslations>;\nlet app: NestExpressApplication;\nlet orm: MikroORM;\n\n/**\n * This file is used to setup the ORM & the NestJS application before running each suite of tests.\n * > A suite is made of all the tests in the same file.\n */\n\n// So this runs before all tests of the suite\nbeforeAll(async () => {\n\tconst moduleFixture: TestingModule = await Test.createTestingModule({\n\t\timports: [\n\t\t\tAppModule,\n\t\t\tMikroOrmModule.forRoot({\n\t\t\t\t...config,\n\t\t\t\t// Entities paths are relative to the root of the project so we need to update them\n\t\t\t\tentities: [path.join(__dirname, '../../dist/src/modules/**/*.entity.js')],\n\t\t\t\tentitiesTs: [path.join(__dirname, '../src/modules/**/*.entity.ts')],\n\t\t\t}),\n\t\t\tI18nModule.forRoot({\n\t\t\t\tfallbackLanguage: 'en-US',\n\t\t\t\tloaderOptions: {\n\t\t\t\t\tpath: path.join(__dirname, '../src/i18n/'),\n\t\t\t\t\twatch: true,\n\t\t\t\t},\n\t\t\t\tresolvers: [AcceptLanguageResolver],\n\t\t\t}),\n\t\t],\n\t}).compile();\n\n\tapp = moduleFixture.createNestApplication();\n\tapp.setGlobalPrefix('api');\n\tapp.enableCors({ origin: env().cors });\n\tapp.useStaticAssets(env().files.baseDir, { index: false, prefix: '/public' });\n\n\torm = moduleFixture.get<MikroORM>(MikroORM);\n\ti18n = moduleFixture.get<I18nService<I18nTranslations>>(I18nService);\n\n\tawait app.init();\n\n\texpect(app).toBeDefined();\n\texpect(orm).toBeDefined();\n\texpect(i18n).toBeDefined();\n});\n\n// And this runs after all tests of the suite\nafterAll(async () => {\n\tawait orm.close(true);\n\tawait app.close();\n});\n\nexport { app, orm, i18n };\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/app.module.ts","/Users/juknum/Documents/Code/AE/api/src/env.ts","/Users/juknum/Documents/Code/AE/api/src/mikro-orm.config.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/interceptor/logging.interceptor.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.module.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/app.module.ts",{"fileContent":"import path from 'path';\n\nimport { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { AcceptLanguageResolver, I18nModule } from 'nestjs-i18n';\n\nimport { AuthModule } from '@modules/auth/auth.module';\nimport { LoggingInterceptor } from '@modules/logs/interceptor/logging.interceptor';\nimport { LogsModule } from '@modules/logs/logs.module';\nimport { PermissionsModule } from '@modules/permissions/permissions.module';\nimport { PromotionsModule } from '@modules/promotions/promotions.module';\nimport { RolesModule } from '@modules/roles/roles.module';\nimport { UsersModule } from '@modules/users/users.module';\n\nimport env from './env';\nimport config from './mikro-orm.config';\n\n@Module({\n\timports: [\n\t\tConfigModule.forRoot({\n\t\t\tisGlobal: true,\n\t\t\tload: [env],\n\t\t}),\n\t\tScheduleModule.forRoot(),\n\t\tMikroOrmModule.forRoot({\n\t\t\t...config,\n\t\t\t// Entities paths are relative to the root of the project so we need to update them\n\t\t\tentities: [path.join(__dirname, '../../dist/src/modules/**/*.entity.js')],\n\t\t\tentitiesTs: [path.join(__dirname, '/modules/**/*.entity.ts')],\n\t\t}),\n\t\tI18nModule.forRoot({\n\t\t\tfallbackLanguage: 'en-US',\n\t\t\tloaderOptions: {\n\t\t\t\tpath: path.join(__dirname, '/i18n/'),\n\t\t\t\twatch: true,\n\t\t\t},\n\t\t\tresolvers: [AcceptLanguageResolver],\n\t\t\ttypesOutputPath: path.join(__dirname, '../../src/types/api/i18n.d.ts'),\n\t\t}),\n\t\tAuthModule,\n\t\tLogsModule,\n\t\tPermissionsModule,\n\t\tPromotionsModule,\n\t\tRolesModule,\n\t\tUsersModule,\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: APP_INTERCEPTOR,\n\t\t\tuseClass: LoggingInterceptor,\n\t\t},\n\t],\n})\nexport class AppModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/interceptor/logging.interceptor.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.module.ts","/Users/juknum/Documents/Code/AE/api/src/env.ts","/Users/juknum/Documents/Code/AE/api/src/mikro-orm.config.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/strategies/jwt.strategy.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.controller.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.module.ts",{"fileContent":"import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { UsersModule } from '@modules/users/users.module';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n\timports: [\n\t\tPassportModule,\n\t\tJwtModule.registerAsync({\n\t\t\timports: [ConfigModule],\n\t\t\tuseFactory: (configService: ConfigService) => ({\n\t\t\t\tsecret: configService.get<string>('auth.jwtKey'),\n\t\t\t\tsignOptions: { expiresIn: configService.get('auth.jwtExpirationTime') },\n\t\t\t}),\n\t\t\tinject: [ConfigService],\n\t\t}),\n\t\tUsersModule,\n\t],\n\tcontrollers: [AuthController],\n\tproviders: [AuthService, JwtStrategy],\n\texports: [AuthService],\n})\nexport class AuthModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.module.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/strategies/jwt.strategy.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/sign-in.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/token.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.module.ts",{"fileContent":"import { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserVisibility } from '@modules/users/entities/user-visibility.entity';\nimport { User } from '@modules/users/entities/user.entity';\n\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n\timports: [MikroOrmModule.forFeature([User, UserVisibility])],\n\tproviders: [UsersService, JwtService],\n\tcontrollers: [UsersController],\n\texports: [UsersService],\n})\nexport class UsersModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self-or-perms.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self-or-perms.guard.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.controller.ts",{"fileContent":"import type { Request } from 'express';\n\nimport {\n\tBody,\n\tController,\n\tDelete,\n\tGet,\n\tParam,\n\tPatch,\n\tPost,\n\tReq,\n\tStreamableFile,\n\tUploadedFile,\n\tUseGuards,\n\tUseInterceptors,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n\tApiBearerAuth,\n\tApiBody,\n\tApiConsumes,\n\tApiOkResponse,\n\tApiOperation,\n\tApiTags,\n\tApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\nimport { GuardPermissions } from '@modules/auth/decorators/permissions.decorator';\nimport { GuardSelfOrPermissions } from '@modules/auth/decorators/self-or-perms.decorator';\nimport { UserPostByAdminDTO } from '@modules/auth/dto/register.dto';\nimport { PermissionGuard } from '@modules/auth/guards/permission.guard';\nimport { SelfOrPermissionGuard } from '@modules/auth/guards/self-or-perms.guard';\nimport { Role } from '@modules/roles/entities/role.entity';\nimport { getStreamableFile } from '@utils/images';\n\nimport { UserPatchDTO } from './dto/patch.dto';\nimport { UserVisibility } from './entities/user-visibility.entity';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './users.service';\n\n@ApiTags('Users')\n@Controller('users')\n@UseGuards(AuthGuard('jwt'))\n@ApiBearerAuth()\nexport class UsersController {\n\tconstructor(private readonly usersService: UsersService) {}\n\n\t@Post()\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_USER')\n\t@ApiOperation({ summary: 'Create a new user' })\n\t@ApiOkResponse({ description: 'The created user', type: User })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync create(@Body() input: UserPostByAdminDTO) {\n\t\treturn this.usersService.registerByAdmin(input);\n\t}\n\n\t@Patch()\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_EDIT_USER'])\n\t@ApiOperation({ summary: 'Update an existing user' })\n\t@ApiOkResponse({ description: 'The updated user', type: User })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync update(@Body() input: UserPatchDTO, @Req() req: Request & { user: User }) {\n\t\treturn this.usersService.update(req.user.id, input);\n\t}\n\n\t@Delete(':id')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_DELETE_USER'])\n\t@ApiOperation({ summary: 'Delete a user' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync delete(@Param('id') id: number) {\n\t\treturn this.usersService.delete(id);\n\t}\n\n\t@Get(':id')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_USER'])\n\t@ApiOperation({ summary: 'Get public information of a user' })\n\t@ApiOkResponse({ description: 'User data, excepted privates fields (set in the visibility table)', type: User })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync get(@Param('id') id: number) {\n\t\treturn this.usersService.findOne({ id });\n\t}\n\n\t@Get(':id/private')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_USER_PRIVATE'])\n\t@ApiOperation({ summary: 'Get information of a user' })\n\t@ApiOkResponse({ description: 'User data', type: User })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getAsPrivate(@Param('id') id: number) {\n\t\treturn this.usersService.findOne({ id }, false);\n\t}\n\n\t@Get(':id/visibility')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_USER_PRIVATE'])\n\t@ApiOperation({ summary: 'Get visibility of a user' })\n\t@ApiOkResponse({ description: 'User data', type: UserVisibility })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getVisibility(@Param('id') id: number) {\n\t\treturn this.usersService.findVisibility({ id });\n\t}\n\n\t@Post(':id/picture')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_EDIT_USER'])\n\t@ApiOperation({ summary: 'Update user profile picture' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiConsumes('multipart/form-data')\n\t@ApiBody({\n\t\tschema: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tfile: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tformat: 'binary',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@UseInterceptors(FileInterceptor('file'))\n\tasync editPicture(@UploadedFile() file: Express.Multer.File, @Param('id') id: number) {\n\t\treturn this.usersService.updatePicture({ id, file });\n\t}\n\n\t@Delete(':id/picture')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_USER')\n\t@ApiOperation({ summary: 'Delete user profile picture' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync deletePicture(@Param('id') id: number) {\n\t\treturn this.usersService.deletePicture(id);\n\t}\n\n\t@Get(':id/picture')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_USER'])\n\t@ApiOperation({ summary: 'Get user profile picture' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getPicture(@Param('id') id: number) {\n\t\tconst picture = await this.usersService.getPicture(id);\n\t\treturn new StreamableFile(getStreamableFile(picture.path));\n\t}\n\n\t@Post(':id/banner')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_EDIT_USER'])\n\t@ApiOperation({ summary: 'Update user profile banner' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiConsumes('multipart/form-data')\n\t@ApiBody({\n\t\tschema: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tfile: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tformat: 'binary',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@UseInterceptors(FileInterceptor('file'))\n\tasync editBanner(@UploadedFile() file: Express.Multer.File, @Param('id') id: number) {\n\t\treturn this.usersService.updateBanner({ id, file });\n\t}\n\n\t@Delete(':id/banner')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_EDIT_USER'])\n\t@ApiOperation({ summary: 'Delete user profile banner' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync deleteBanner(@Param('id') id: number) {\n\t\treturn this.usersService.deleteBanner(id);\n\t}\n\n\t@Get(':id/banner')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_EDIT_USER'])\n\t@ApiOperation({ summary: 'Get user profile banner' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getBanner(@Param('id') id: number) {\n\t\tconst banner = await this.usersService.getBanner(id);\n\t\treturn new StreamableFile(getStreamableFile(banner.path));\n\t}\n\n\t@Get(':id/roles')\n\t@UseGuards(PermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_USER'])\n\t@ApiOperation({ summary: 'Get roles of a user' })\n\t@ApiOkResponse({ description: 'Roles of the user', type: [Role] })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getRoleUsers(@Param('id') id: number) {\n\t\treturn this.usersService.getUserRoles(id, { show_expired: true, show_revoked: true });\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self-or-perms.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self-or-perms.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts",{"fileContent":"import type { PermissionName } from '@types';\n\nimport { SetMetadata } from '@nestjs/common';\n\n/**\n * Set up what permissions are required to access the decorated route\n * @param {...PermissionName} permissions - list of permissions required to access the route\n */\nexport const GuardPermissions = <T extends [PermissionName, ...PermissionName[]]>(...permissions: T) =>\n\tSetMetadata('guard_permissions', permissions);\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self-or-perms.decorator.ts",{"fileContent":"import type { PermissionName } from '@types';\n\nimport { applyDecorators } from '@nestjs/common';\n\nimport { GuardPermissions } from './permissions.decorator';\nimport { GuardSelfParam } from './self.decorator';\n\nexport const GuardSelfOrPermissions = <T extends [PermissionName, ...PermissionName[]]>(\n\tparam: string,\n\tpermissions: T,\n) => {\n\treturn applyDecorators(GuardSelfParam(param), GuardPermissions(...permissions));\n};\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self.decorator.ts",{"fileContent":"import { SetMetadata } from '@nestjs/common';\n\n/**\n * Set up the name of the parameter that contains the user id concerned by the route\n * @param {string} param The name of the parameter that contains the user id\n */\nexport const GuardSelfParam = (param: string) => SetMetadata('guard_self_param_key', param);\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts",{"fileContent":"import type { JWTPayload, PermissionName } from '@types';\nimport type { Request } from 'express';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\n/**\n * Check if the authenticated user has the required permissions to access the route\n * @example\n * UseGuards(PermissionGuard)\n * ApiPermissions('permission1', 'permission2')\n * async route() {\n * // ...\n * }\n */\n@Injectable()\nexport class PermissionGuard implements CanActivate {\n\tconstructor(\n\t\tprotected readonly jwtService: JwtService,\n\t\tprotected readonly configService: ConfigService,\n\t\tprotected readonly userService: UsersService,\n\t\tprotected readonly reflector: Reflector,\n\t) {}\n\n\tasync canActivate(context: ExecutionContext) {\n\t\ttype Req = Request & { headers: { authorization: string } };\n\n\t\t// Access the request object from the execution context\n\t\tconst request = context.switchToHttp().getRequest<Req>();\n\n\t\t// Access the permissions required to access the route\n\t\tconst permsToValidate = this.reflector.get<Array<PermissionName>>('guard_permissions', context.getHandler());\n\n\t\t// Retrieve the authenticated user from the request's user object or session\n\t\tconst bearerToken = request.headers.authorization;\n\n\t\t// Verify and decode the JWT token to extract the user ID\n\t\tconst decodedToken = this.jwtService.verify<JWTPayload>(bearerToken.replace('Bearer ', ''), {\n\t\t\tsecret: this.configService.get<string>('auth.jwtKey'),\n\t\t});\n\n\t\t// Get the user from the database\n\t\t// If no user found -> thrown within the service\n\t\tconst user = await this.userService.findOne({ id: decodedToken.sub });\n\n\t\tconst perms = (await user.permissions.loadItems())\n\t\t\t.filter((p) => p.expires > new Date() && p.revoked === false)\n\t\t\t.map((p) => p.name);\n\n\t\tconst rolesPerms = (await user.roles.loadItems())\n\t\t\t.filter((p) => p.expires > new Date() && p.revoked === false)\n\t\t\t.map((p) => p.permissions)\n\t\t\t.flat();\n\n\t\tconst acquiredPerms = [...perms, ...rolesPerms];\n\n\t\t// If the user has the ROOT permission, they have all permissions.\n\t\tif (acquiredPerms.includes('ROOT')) return true;\n\n\t\t// If the user has any of the required permissions, they have permission.\n\t\tif (acquiredPerms.some((p) => permsToValidate.includes(p))) return true;\n\n\t\t// Otherwise, they don't have permission.\n\t\treturn false;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts",{"fileContent":"import type { I18nTranslations, ObjectKeysArray } from '@types';\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { BadRequestException, Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Cron } from '@nestjs/schedule';\nimport { compareSync, hashSync } from 'bcrypt';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\nimport { UserPostByAdminDTO, UserPostDTO } from '@modules/auth/dto/register.dto';\nimport { UserBanner } from '@modules/users/entities/user-banner.entity';\nimport { UserPicture } from '@modules/users/entities/user-picture.entity';\nimport { UserVisibility } from '@modules/users/entities/user-visibility.entity';\nimport { User } from '@modules/users/entities/user.entity';\nimport { checkBirthday } from '@utils/dates';\nimport { checkEmail, sendEmail } from '@utils/email';\nimport { convertToWebp, isBannerAspectRation, isSquare } from '@utils/images';\nimport { generateRandomPassword } from '@utils/password';\nimport {\n\tbirthdayInvalid,\n\temailAlreadyUsed,\n\temailAlreadyVerified,\n\temailInvalid,\n\temailInvalidToken,\n\temailNotFound,\n\tfieldMissing,\n\tfieldUnexpected,\n\tidInvalid,\n\tidNotFound,\n\tidOrEmailMissing,\n} from '@utils/responses';\nimport { getTemplate } from '@utils/template';\n\nimport { UserPatchDTO } from './dto/patch.dto';\n\n@Injectable()\nexport class UsersService {\n\tconstructor(\n\t\tprivate readonly i18n: I18nService<I18nTranslations>,\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly orm: MikroORM,\n\t) {}\n\n\t/**\n\t * Check for user that are not verified and which their verification period is older than 7 days\n\t * If found, delete them\n\t * Runs every 10 minutes\n\t */\n\t@Cron('0 */10 * * * *')\n\t@UseRequestContext()\n\tasync checkForUnverifiedUsers() {\n\t\tconst users = await this.orm.em.find(User, {\n\t\t\temail_verified: false,\n\t\t\tcreated_at: { $lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) },\n\t\t});\n\n\t\tfor (const user of users) {\n\t\t\tawait this.delete(user.id);\n\t\t}\n\t}\n\n\t@UseRequestContext()\n\tpublic async checkVisibility(user: User): Promise<Partial<User>> {\n\t\tconst visibility = await this.orm.em.findOneOrFail(UserVisibility, { user });\n\n\t\tfor (const key in visibility) {\n\t\t\tif (visibility[key] === false) user[key] = undefined;\n\t\t}\n\n\t\treturn user;\n\t}\n\n\t/**\n\t * Find a user by id or email and return it\n\t * @param {Partial<Pick<User, 'id' | 'email'>>} param0 The id or email of the user to find\n\t * @param {boolean} filter Whether to filter the user or not (default: true)\n\t *\n\t * @returns {Promise<User | Partial<User>>} The user found (partial if filter is true)\n\t * @throws {BadRequestException} If no id or email is provided\n\t * @throws {NotFoundException} If no user is found with the provided id/email\n\t *\n\t * @example\n\t * ```ts\n\t * const user1: User = await this.usersService.findOne({ id: 1 }, false);\n\t * const user2: Partial<User> = await this.usersService.findOne({ email: 'example@domain.com' });\n\t * ```\n\t */\n\tasync findOne({ id, email }: Partial<Pick<User, 'id' | 'email'>>, filter: false): Promise<User>;\n\tasync findOne({ id, email }: Partial<Pick<User, 'id' | 'email'>>): Promise<Partial<User>>;\n\n\t@UseRequestContext()\n\tasync findOne({ id, email }: Partial<Pick<User, 'id' | 'email'>>, filter = true): Promise<User | Partial<User>> {\n\t\tlet user: User = null;\n\n\t\tif (id) user = await this.orm.em.findOne(User, { id });\n\t\tif (email) user = await this.orm.em.findOne(User, { email });\n\n\t\tif (!id && !email) throw new BadRequestException(idOrEmailMissing({ i18n: this.i18n, type: User }));\n\t\tif (!user && id) throw new NotFoundException(idNotFound({ i18n: this.i18n, type: User, id }));\n\t\tif (!user && email) throw new NotFoundException(emailNotFound({ i18n: this.i18n, type: User, email }));\n\n\t\treturn filter ? await this.checkVisibility(user) : user;\n\t}\n\n\t@UseRequestContext()\n\tasync findVisibility({ id }: Partial<Pick<User, 'id'>>): Promise<UserVisibility> {\n\t\tconst user = await this.orm.em.findOne(User, { id });\n\t\tif (!user) throw new NotFoundException(idNotFound({ i18n: this.i18n, type: User, id }));\n\n\t\treturn await this.orm.em.findOne(UserVisibility, { user });\n\t}\n\n\t@UseRequestContext()\n\tasync findAll(filter = true) {\n\t\tconst users = await this.orm.em.find(User, {});\n\t\tif (filter) return users.map(async (user) => await this.checkVisibility(user));\n\n\t\treturn users;\n\t}\n\n\t@UseRequestContext()\n\tasync register(input: UserPostDTO): Promise<User> {\n\t\tObject.keys(input).forEach((key) => {\n\t\t\tconst value = input[key] as unknown;\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tinput[key] = value.trim();\n\t\t\t}\n\t\t});\n\n\t\tconst requiredFields: ObjectKeysArray<UserPostDTO> = ['password', 'first_name', 'last_name', 'email', 'birthday']; // Add other required fields as necessary\n\n\t\trequiredFields.forEach((field) => {\n\t\t\tif (!input[field]) throw new BadRequestException(fieldMissing({ i18n: this.i18n, type: UserPostDTO, field }));\n\t\t});\n\n\t\t(Object.keys(input) as ObjectKeysArray<UserPostDTO>).forEach((field) => {\n\t\t\tif (!requiredFields.includes(field))\n\t\t\t\tthrow new BadRequestException(fieldUnexpected({ i18n: this.i18n, type: UserPostDTO, field }));\n\t\t});\n\n\t\tif (!checkEmail(input.email)) throw new BadRequestException(emailInvalid({ i18n: this.i18n, email: input.email }));\n\n\t\tif (!checkBirthday(input.birthday))\n\t\t\tthrow new BadRequestException(birthdayInvalid({ i18n: this.i18n, date: input.birthday }));\n\n\t\tif (await this.orm.em.findOne(User, { email: input.email }))\n\t\t\tthrow new BadRequestException(emailAlreadyUsed({ i18n: this.i18n, email: input.email }));\n\n\t\t// Check if the password is already hashed\n\t\tif (input.password.length !== 60) input.password = hashSync(input.password, 10);\n\n\t\t// Add the email verification token & create the user\n\t\tconst email_token = generateRandomPassword(12);\n\n\t\tlet user: User;\n\t\ttry {\n\t\t\tuser = this.orm.em.create(User, {\n\t\t\t\t...input,\n\t\t\t\temail_verification: hashSync(email_token, 10),\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthrow new BadRequestException('Invalid input, please check your data');\n\t\t}\n\n\t\t// Save changes to the database & create the user's visibility parameters\n\t\tthis.orm.em.create(UserVisibility, { user });\n\t\tawait this.orm.em.persistAndFlush(user);\n\n\t\t// Fetch the user again to get the id\n\t\tconst registered = await this.orm.em.findOne(User, { email: input.email });\n\n\t\tawait sendEmail({\n\t\t\tto: [registered.email],\n\t\t\tsubject: this.i18n.t('templates.register_common.subject', { lang: I18nContext.current().lang }),\n\t\t\thtml: getTemplate('emails/register_user', this.i18n, {\n\t\t\t\tusername: registered.full_name,\n\t\t\t\tlink: this.configService.get<boolean>('production')\n\t\t\t\t\t? `https://ae.utbm.fr/api/auth/confirm/${registered.id}/${encodeURI(email_token)}/${encodeURI(\n\t\t\t\t\t\t\t'https://ae.utbm.fr',\n\t\t\t\t\t  )}`\n\t\t\t\t\t: `http://localhost:${this.configService.get<string>('port')}/api/auth/confirm/${registered.id}/${encodeURI(\n\t\t\t\t\t\t\temail_token,\n\t\t\t\t\t  )}`,\n\t\t\t\tdays: 7,\n\t\t\t}),\n\t\t});\n\n\t\treturn user;\n\t}\n\n\t@UseRequestContext()\n\tasync verifyEmail(user_id: number, token: string): Promise<User> {\n\t\tif (!user_id || !token) throw new BadRequestException('Missing user id or token');\n\n\t\tif (typeof user_id === 'string' && parseInt(user_id, 10) != user_id)\n\t\t\tthrow new BadRequestException(idInvalid({ i18n: this.i18n, type: User, id: user_id }));\n\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException(idNotFound({ i18n: this.i18n, type: User, id: user_id }));\n\n\t\tif (user.email_verified) throw new BadRequestException(emailAlreadyVerified({ i18n: this.i18n, type: User }));\n\n\t\tif (!compareSync(token, user.email_verification))\n\t\t\tthrow new UnauthorizedException(emailInvalidToken({ i18n: this.i18n }));\n\n\t\tuser.email_verified = true;\n\t\tuser.email_verification = null;\n\n\t\tawait this.orm.em.persistAndFlush(user);\n\t\treturn user;\n\t}\n\n\t@UseRequestContext()\n\tasync registerByAdmin(input: UserPostByAdminDTO): Promise<User> {\n\t\tif (await this.orm.em.findOne(User, { email: input.email }))\n\t\t\tthrow new BadRequestException(`User already with the email '${input.email}' already exists`);\n\n\t\tif (!checkEmail(input.email)) throw new BadRequestException(emailInvalid({ i18n: this.i18n, email: input.email }));\n\n\t\tif (!checkBirthday(input.birthday))\n\t\t\tthrow new BadRequestException(birthdayInvalid({ i18n: this.i18n, date: input.birthday }));\n\n\t\t// Generate a random password & hash it\n\t\tconst password = generateRandomPassword(12);\n\t\tconst user = this.orm.em.create(User, { ...input, password: hashSync(password, 10), email_verified: true });\n\t\tthis.orm.em.create(UserVisibility, { user });\n\n\t\tawait sendEmail({\n\t\t\tto: [user.email],\n\t\t\tsubject: this.i18n.t('templates.register_common.subject', { lang: I18nContext.current().lang }),\n\t\t\thtml: getTemplate('emails/register_user_by_admin', this.i18n, {\n\t\t\t\tusername: user.full_name,\n\t\t\t\tpassword,\n\t\t\t}),\n\t\t});\n\n\t\tawait this.orm.em.persistAndFlush(user);\n\t\treturn user;\n\t}\n\n\t@UseRequestContext()\n\tasync update(requestUserId: number, input: UserPatchDTO) {\n\t\tconst user = await this.findOne({ id: input.id }, false);\n\n\t\tif (!user) throw new NotFoundException(`User with id ${input.id} not found`);\n\n\t\tif (input.email && !checkEmail(input.email))\n\t\t\tthrow new BadRequestException(emailInvalid({ i18n: this.i18n, email: input.email }));\n\n\t\tif (input.hasOwnProperty('birthday') || input.hasOwnProperty('first_name') || input.hasOwnProperty('last_name')) {\n\t\t\tconst currentUser = await this.findOne({ id: requestUserId }, false);\n\n\t\t\tif (currentUser.id === user.id)\n\t\t\t\tthrow new UnauthorizedException(\n\t\t\t\t\t'You cannot update your own birthday / first (or last) name, ask another user with the appropriate permission',\n\t\t\t\t);\n\t\t}\n\n\t\tObject.assign(user, input);\n\n\t\tawait this.orm.em.persistAndFlush(user);\n\t\treturn user;\n\t}\n\n\t@UseRequestContext()\n\tasync updatePicture({ id, file }: { id: number; file: Express.Multer.File }) {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['*', 'picture'] });\n\n\t\t// TODO: add a check to autorise the user to change his picture if he has the associated permission\n\t\t// -> the user needs to be the one sending the request, not the one targeted by the request\n\t\tif (\n\t\t\tuser.picture &&\n\t\t\t0 <\n\t\t\t\tthis.configService.get<number>('files.usersPicturesDelay') * 1000 -\n\t\t\t\t\t(new Date().getTime() - new Date(user.picture.updated_at).getTime())\n\t\t)\n\t\t\tthrow new UnauthorizedException('You can only change your picture once a week');\n\n\t\tconst { buffer, mimetype } = file;\n\t\tconst imageDir = path.join(this.configService.get<string>('files.users'), 'pictures');\n\t\tconst extension = mimetype.replace('image/', '.');\n\t\tconst filename = `${user.id}${extension}`;\n\t\tconst imagePath = path.join(imageDir, filename);\n\n\t\t// write the file\n\t\tfs.mkdirSync(imageDir, { recursive: true });\n\t\tfs.writeFileSync(imagePath, buffer);\n\n\t\t// test if the image is square\n\t\tif (!(await isSquare(imagePath))) {\n\t\t\tfs.unlinkSync(imagePath);\n\t\t\tthrow new BadRequestException('The user picture must be square');\n\t\t}\n\n\t\t// remove the old picture (if any)\n\t\tif (user.picture && user.picture.path && user.picture.path !== imagePath) fs.unlinkSync(user.picture.path);\n\n\t\t// convert to webp\n\t\tfs.createWriteStream(await convertToWebp(imagePath));\n\n\t\t// update database\n\t\tif (!user.picture)\n\t\t\tuser.picture = this.orm.em.create(UserPicture, {\n\t\t\t\tfilename,\n\t\t\t\tmimetype,\n\t\t\t\tpath: imagePath.replace(extension, '.webp'),\n\t\t\t\tuser,\n\t\t\t});\n\t\telse {\n\t\t\tuser.picture.filename = filename;\n\t\t\tuser.picture.mimetype = 'image/webp';\n\t\t\tuser.picture.updated_at = new Date();\n\t\t\tuser.picture.path = imagePath.replace(extension, '.webp');\n\t\t}\n\n\t\tawait this.orm.em.persistAndFlush(user);\n\t}\n\n\t@UseRequestContext()\n\tasync getPicture(id: number): Promise<UserPicture> {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['picture'] });\n\t\tif (!user.picture) throw new NotFoundException('User has no picture');\n\t\treturn user.picture;\n\t}\n\n\t@UseRequestContext()\n\tasync deletePicture(id: number): Promise<void> {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['picture'] });\n\t\tif (!user.picture) throw new NotFoundException('User has no picture to be deleted');\n\n\t\tfs.unlinkSync(user.picture.path);\n\t\tawait this.orm.em.removeAndFlush(user.picture);\n\t}\n\n\t@UseRequestContext()\n\tasync updateBanner({ id, file }: { id: number; file: Express.Multer.File }) {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['*', 'banner'] });\n\n\t\tconst { buffer, mimetype } = file;\n\t\tconst imageDir = path.join(this.configService.get<string>('files.users'), 'banners');\n\t\tconst extension = mimetype.replace('image/', '.');\n\t\tconst filename = `${user.id}${extension}`;\n\t\tconst imagePath = path.join(imageDir, filename);\n\n\t\t// write the file\n\t\tfs.mkdirSync(imageDir, { recursive: true });\n\t\tfs.writeFileSync(imagePath, buffer);\n\n\t\t// test if the image is square\n\t\tif (!(await isBannerAspectRation(imagePath))) {\n\t\t\tfs.unlinkSync(imagePath);\n\t\t\tthrow new BadRequestException('The image must be of 1:3 aspect ratio');\n\t\t}\n\n\t\t// remove old banner if path differs\n\t\tif (user.banner && user.banner.path && user.banner.path !== imagePath) fs.unlinkSync(user.banner.path);\n\n\t\t// convert to webp\n\t\tfs.createWriteStream(await convertToWebp(imagePath));\n\n\t\t// update database\n\t\tif (!user.banner)\n\t\t\tuser.banner = this.orm.em.create(UserBanner, {\n\t\t\t\tfilename,\n\t\t\t\tmimetype,\n\t\t\t\tpath: imagePath.replace(extension, '.webp'),\n\t\t\t\tuser,\n\t\t\t});\n\t\telse {\n\t\t\tuser.banner.filename = filename;\n\t\t\tuser.banner.mimetype = 'image/webp';\n\t\t\tuser.banner.path = imagePath.replace(extension, '.webp');\n\t\t}\n\n\t\tawait this.orm.em.persistAndFlush(user);\n\t}\n\n\t@UseRequestContext()\n\tasync getBanner(id: number): Promise<UserBanner> {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['banner'] });\n\t\tif (!user.banner) throw new NotFoundException('User has no banner');\n\n\t\treturn user.banner;\n\t}\n\n\t@UseRequestContext()\n\tasync deleteBanner(id: number): Promise<void> {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['banner'] });\n\t\tif (!user.banner) throw new NotFoundException('User has no banner to be deleted');\n\n\t\tfs.unlinkSync(user.banner.path);\n\t\tawait this.orm.em.removeAndFlush(user.banner);\n\t}\n\n\t@UseRequestContext()\n\tasync delete(id: number) {\n\t\tconst user = await this.orm.em.findOne(User, { id });\n\t\tawait this.orm.em.removeAndFlush(user);\n\t}\n\n\t@UseRequestContext()\n\tasync getUserRoles(id: number, input: { show_expired: boolean; show_revoked: boolean }) {\n\t\tconst user = await this.orm.em.findOneOrFail(User, { id }, { fields: ['roles'] });\n\t\tconst roles = user.roles.getItems();\n\n\t\tif (!input.show_expired) roles.filter((p) => p.expires > new Date());\n\t\tif (!input.show_revoked) roles.filter((p) => p.revoked === false);\n\n\t\treturn roles;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/env.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts",{"fileContent":"/**\n * Determines if a date is valid for a user's birthday\n * (must be at least 13 years old and not in the future)\n * @param {string|Date} birthday The date to check\n * @returns {boolean} True if the date is valid, false otherwise\n */\nexport function checkBirthday(birthday: string | Date): boolean {\n\tconst date = typeof birthday === 'string' ? new Date(birthday) : birthday;\n\tconst now = new Date();\n\n\t// Check if the date is in the future\n\tif (date > now) return false;\n\n\t// Check if the user is at least 13 years old\n\tconst diff = now.getFullYear() - date.getFullYear();\n\tif (diff < 13) return false;\n\n\treturn true;\n}\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/src/utils/email.ts",{"fileContent":"import type { Email } from '@types';\n\nimport { createTransport } from 'nodemailer';\n\nimport env from '@env';\n\n/**\n * Check if an email is allowed to be used (to register for example) and if it is valid\n * @param {Email} email the email to check\n * @returns {boolean} true if the email is allowed, false otherwise\n */\nexport function checkEmail(email: Email): boolean {\n\tconst blacklist = env().email.blacklist.host;\n\tconst whitelisted = env().email.whitelist.email;\n\n\tif (whitelisted.includes(email)) return true;\n\telse if (blacklist.some((host) => email.endsWith(host))) return false;\n\n\tconst regex = new RegExp(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);\n\treturn regex.test(email);\n}\n\nconst transporter = createTransport({\n\thost: env().email.host,\n\tport: env().email.port,\n\tsecure: env().email.secure,\n\tauth: {\n\t\tuser: env().email.auth.user,\n\t\tpass: env().email.auth.pass,\n\t},\n});\n\ninterface EmailOptions {\n\tto: string[];\n\tfrom?: string;\n\tsubject: string;\n\thtml: string;\n}\n\n/**\n * Send en email based on a template and given data\n * @param {EmailOptions} options the options for the email\n */\nexport async function sendEmail(options: EmailOptions): Promise<void> {\n\tif (env().email.disabled) return;\n\n\tawait transporter.sendMail({\n\t\tfrom: options.from ?? `ae.noreply@utbm.fr`,\n\t\tto: options.to.join(', '),\n\t\tsubject: options.subject,\n\t\thtml: options.html,\n\t});\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/env.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/env.ts",{"fileContent":"import { join } from 'path';\n\nexport default () => ({\n\tproduction: process.env['DEBUG'] === 'false',\n\tport: parseInt(process.env['API_PORT'], 10) || 3000,\n\tauth: {\n\t\tjwtKey: process.env['JWT_KEY'],\n\t\tjwtExpirationTime: parseInt(process.env['JWT_EXPIRATION_TIME'], 10) || 60 * 60 * 24 * 7, // 1 week\n\t},\n\tfiles: {\n\t\tbaseDir: join(process.cwd(), process.env['FILES_BASE_DIR'] || './public'),\n\t\tusersPicturesDelay: parseInt(process.env['USERS_PICTURES_DELAY'], 10) || 60 * 60 * 24 * 7, // 1 week\n\t\tusers: join(process.cwd(), process.env['USERS_PATH'] || './public/users'),\n\t\tpromotions: join(process.cwd(), process.env['PROMOTIONS_LOGO_PATH'] || './public/promotions'),\n\t},\n\temail: {\n\t\tdisabled: process.env['EMAIL_DISABLED'] === 'true',\n\t\thost: process.env['EMAIL_HOST'],\n\t\tport: parseInt(process.env['EMAIL_PORT'], 10) || 465,\n\t\tsecure: process.env['EMAIL_SECURE'] === 'true',\n\t\tauth: {\n\t\t\tuser: process.env['EMAIL_AUTH_USER'],\n\t\t\tpass: process.env['EMAIL_AUTH_PASS'],\n\t\t},\n\t\twhitelist: {\n\t\t\t// Email addresses that are allowed to be used to register\n\t\t\t// even if they're domain is blacklisted\n\t\t\temail: ['ae.info@utbm.fr', ...(process.env['WHITELISTED_EMAILS']?.split(';') ?? [])],\n\t\t},\n\t\tblacklist: {\n\t\t\thost: ['@utbm.fr', ...(process.env['BLACKLISTED_HOSTS']?.split(';') ?? [])],\n\t\t},\n\t},\n\tcors: process.env['DEBUG'] === 'true' ? '*' : process.env['CORS_ORIGIN_WHITELIST']?.split(';'),\n});\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/src/utils/images.ts",{"fileContent":"import { createReadStream, ReadStream, unlinkSync } from 'fs';\n\nimport sharp from 'sharp';\n\n/**\n * Check if an image is square\n * @param {string} imagePath The path to the image\n * @returns {boolean} True if the image is square, false otherwise\n */\nexport async function isSquare(imagePath: string): Promise<boolean> {\n\tconst { width, height } = await sharp(imagePath).metadata();\n\treturn width === height;\n}\n\n/**\n * Determine if the image is using a 1:3 aspect ratio\n * @param {string} imagePath The path to the image\n * @returns {boolean} True if the image is using a 1:3 aspect ratio, false otherwise\n */\nexport async function isBannerAspectRation(imagePath: string): Promise<boolean> {\n\tconst { width, height } = await sharp(imagePath).metadata();\n\treturn width / height === 1 / 3;\n}\n\n/**\n * Convert any static image format to webp\n * @param {string} imagePath The path to the image\n * @returns {string} The path to the converted image\n *\n * @info GIF images are not converted\n */\nexport async function convertToWebp(imagePath: string): Promise<string> {\n\tconst { format } = await sharp(imagePath).metadata();\n\tif (format === 'gif' || format === 'webp') return imagePath;\n\n\tconst newPath = imagePath.replace(/\\.[^/.]+$/, '.webp');\n\n\t// convert the image to webp\n\tconst buffer = await sharp(imagePath).toBuffer();\n\tsharp(buffer)\n\t\t.webp()\n\t\t.toFile(newPath, (err, info) => {\n\t\t\t// delete the old image\n\t\t\tif (!err && info) unlinkSync(imagePath);\n\t\t});\n\n\treturn newPath;\n}\n\n/**\n * Create a read stream from a file, with a retry mechanism\n * @param {string} path The path to the file\n * @param {number} attempts Number of attempts to try to create the stream @default 10\n * @returns {ReadStream} The read stream\n * @throws {Error} If the file can't be read after the attempts\n */\nexport function getStreamableFile(path: string, attempts = 10): ReadStream {\n\ttry {\n\t\treturn createReadStream(path);\n\t} catch (error) {\n\t\tif (attempts === 0) throw error;\n\n\t\tsetTimeout(() => {\n\t\t\treturn getStreamableFile(path, --attempts);\n\t\t}, 1000);\n\t}\n}\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/src/utils/password.ts",{"fileContent":"/**\n * Generates a random password of the given length.\n * @param {number} length the length of the password to generate\n * @returns {string} the generated password\n */\nexport function generateRandomPassword(length: number): string {\n\tconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';\n\tlet password = '';\n\n\tfor (let i = 0; i < length; i++) {\n\t\tconst randomIndex = Math.floor(Math.random() * chars.length);\n\t\tpassword += chars[randomIndex];\n\t}\n\n\treturn password;\n}\n","resolvedModuleNames":[]}],["/Users/juknum/Documents/Code/AE/api/src/utils/template.ts",{"fileContent":"import fs from 'fs';\nimport path from 'path';\n\nimport { PathImpl2 } from '@nestjs/config';\nimport { I18nContext, I18nService } from 'nestjs-i18n';\n\nimport { I18nTranslations } from '@types';\n\nexport type AvailableTemplates = 'emails/register_user_by_admin' | 'emails/register_user';\nexport type AvailableTemplateArgs =\n\t| (\n\t\t\t| {\n\t\t\t\t\t[k: string]: unknown;\n\t\t\t  }\n\t\t\t| string\n\t  )[]\n\t| {\n\t\t\t[k: string]: unknown;\n\t  };\n\n/**\n * Load the given template and translate all strings in it\n * @param {AvailableTemplates} templateName The name of the template to load\n * @param {I18nService} i18n The i18n service to use to translate the template\n * @param {AvailableTemplateArgs?} args Arguments to pass to the translation function (if any)\n * @returns {string} The translated template\n */\nexport function getTemplate(\n\ttemplateName: AvailableTemplates,\n\ti18n: I18nService<I18nTranslations>,\n\targs: AvailableTemplateArgs = {},\n): string {\n\tlet inputString = fs.readFileSync(path.join(__dirname, `../templates/${templateName}.html`), 'utf8');\n\tconst regex = /\\{\\{([^}]+)\\}\\}/g;\n\tconst matches = [];\n\n\tlet match: RegExpExecArray;\n\twhile ((match = regex.exec(inputString)) !== null) {\n\t\tconst variant = match[1].trim();\n\t\tmatches.push(variant);\n\t}\n\n\tmatches.forEach(\n\t\t(match: PathImpl2<I18nTranslations>) =>\n\t\t\t(inputString = inputString.replace(\n\t\t\t\t`{{ ${match} }}`,\n\t\t\t\ti18n.t(match, { lang: I18nContext.current()?.lang ?? undefined, args }),\n\t\t\t)),\n\t);\n\treturn inputString;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts",{"fileContent":"import type { UserPatchDto, Email } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsEmail, IsNumber, IsString } from 'class-validator';\n\nexport class UserPatchDTO implements UserPatchDto {\n\t@ApiProperty({ required: true })\n\t@IsNumber()\n\tid: number;\n\n\t@ApiProperty()\n\t@IsEmail()\n\temail: Email;\n\n\t@ApiProperty()\n\t@IsString()\n\tpassword: string;\n\n\t@ApiProperty()\n\t@IsDate()\n\tbirthday: Date;\n\n\t@ApiProperty()\n\t@IsString()\n\tfirst_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tlast_name: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tnickname?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tgender?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tpronouns?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tsecondary_email?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tphone?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tparent_contact?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tcursus?: string;\n\n\t@ApiProperty()\n\t@IsString()\n\tspecialty?: string;\n\n\t@ApiProperty()\n\t@IsNumber()\n\tpromotion?: number;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self-or-perms.guard.ts",{"fileContent":"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { PermissionGuard } from './permission.guard';\nimport { checkSelf } from './self.guard';\n\n@Injectable()\nexport class SelfOrPermissionGuard extends PermissionGuard implements CanActivate {\n\toverride async canActivate(context: ExecutionContext) {\n\t\treturn checkSelf(context, this.jwtService, this.configService, this.reflector) || super.canActivate(context);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self.guard.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self.guard.ts",{"fileContent":"import type { JWTPayload } from '@types';\nimport type { Observable } from 'rxjs';\n\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'supertest';\n\n/**\n * Check if the authenticated user is the same as the user ID in the request\n *\n * **The user id parameter should be called `user_id`**\n * @example\n * UseGuards(SelfGuard)\n * async route(@param('user_id') user_id: string) {\n * // ...\n * }\n */\n@Injectable()\nexport class SelfGuard implements CanActivate {\n\tconstructor(\n\t\tprivate readonly jwtService: JwtService,\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly reflector: Reflector,\n\t) {}\n\n\tcanActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n\t\treturn checkSelf(context, this.jwtService, this.configService, this.reflector);\n\t}\n}\n\nexport function checkSelf(\n\tcontext: ExecutionContext,\n\tjwtService: JwtService,\n\tconfigService: ConfigService,\n\treflector: Reflector,\n): boolean {\n\ttype Req = Request & {\n\t\tparams: { [key: string]: string };\n\t\tbody: { [key: string]: string };\n\t\theaders: { authorization: string };\n\t};\n\n\t// Access the request object from the execution context\n\tconst request = context.switchToHttp().getRequest<Req>();\n\n\t// Access the name of the parameter that contains the user ID\n\tconst userIdKey = reflector.get<string>('guard_self_param_key', context.getHandler());\n\n\t// Extract the user ID from the request parameters or body\n\tconst user_id = request.params[userIdKey] ?? request.body[userIdKey];\n\tif (user_id === undefined) throw new Error(`The parameter ${userIdKey} is missing from the request.`);\n\n\t// Retrieve the authenticated user from the request's user object or session\n\tconst bearerToken = request.headers.authorization;\n\n\t// Verify and decode the JWT token to extract the user ID\n\tconst decodedToken = jwtService.verify<JWTPayload>(bearerToken.replace('Bearer', '').trim(), {\n\t\tsecret: configService.get<string>('auth.jwtKey'),\n\t});\n\n\t// Compare the authenticated user's ID with the ID from the request\n\treturn decodedToken.sub === parseInt(user_id, 10);\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.controller.ts",{"fileContent":"import { Controller, Post, Body, Param, Get, Res, HttpStatus } from '@nestjs/common';\nimport {\n\tApiBadRequestResponse,\n\tApiNotFoundResponse,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiResponse,\n\tApiTags,\n\tApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport express from 'express';\n\nimport { User } from '@modules/users/entities/user.entity';\nimport { UsersService } from '@modules/users/users.service';\n\nimport { AuthService } from './auth.service';\nimport { UserPostDTO } from './dto/register.dto';\nimport { UserSignInDTO } from './dto/sign-in.dto';\nimport { TokenDTO } from './dto/token.dto';\n\n@ApiTags('Authentification')\n@Controller('auth')\nexport class AuthController {\n\tconstructor(private readonly authService: AuthService, private readonly userService: UsersService) {}\n\n\t@Post('login')\n\t@ApiOperation({ summary: 'Sign in a user with email and password' })\n\t@ApiUnauthorizedResponse({ description: 'Unauthorized, password invalid' })\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiOkResponse({ description: 'OK', type: TokenDTO })\n\tasync login(@Body() signInDto: UserSignInDTO): Promise<TokenDTO> {\n\t\treturn this.authService.signIn(signInDto.email, signInDto.password);\n\t}\n\n\t@Post('register')\n\t@ApiOperation({ summary: 'Register a new user' })\n\t@ApiOkResponse({ description: 'User created', type: User })\n\t@ApiBadRequestResponse({ description: 'Bad request, invalid fields' })\n\tasync register(@Body() registerDto: UserPostDTO): Promise<User> {\n\t\treturn this.userService.register(registerDto);\n\t}\n\n\t@Get('confirm/:user_id/:token/:redirect_url?')\n\t@ApiParam({ name: 'redirect_url', required: false })\n\t@ApiOperation({ summary: 'Validate a user account' })\n\t@ApiOkResponse({ description: 'User account validated', type: User })\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiBadRequestResponse({ description: 'Bad request, missing id/token or email already verified' })\n\t@ApiUnauthorizedResponse({ description: 'Unauthorized, invalid token' })\n\t@ApiResponse({\n\t\tstatus: HttpStatus.PERMANENT_REDIRECT,\n\t\tdescription: 'User account validated, redirecting to redirect_url',\n\t})\n\tasync verifyEmail(\n\t\t@Res() res: express.Response,\n\t\t@Param('user_id') user_id: number,\n\t\t@Param('token') token: string,\n\t\t@Param('redirect_url') redirect_url?: string,\n\t) {\n\t\tif (redirect_url && redirect_url !== '') {\n\t\t\tawait this.userService.verifyEmail(user_id, token);\n\t\t\tres.redirect(HttpStatus.PERMANENT_REDIRECT, redirect_url.trim());\n\t\t}\n\n\t\tres.send(await this.userService.verifyEmail(user_id, token));\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/sign-in.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/token.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts",{"fileContent":"import type { JWTPayload, Email, I18nTranslations } from '@types';\n\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { compareSync } from 'bcrypt';\nimport { I18nService } from 'nestjs-i18n';\n\nimport { User } from '@modules/users/entities/user.entity';\nimport { UsersService } from '@modules/users/users.service';\nimport { emailNotVerified } from '@utils/responses';\n\nimport { TokenDTO } from './dto/token.dto';\n\n@Injectable()\nexport class AuthService {\n\tconstructor(\n\t\tprivate readonly i18n: I18nService<I18nTranslations>,\n\t\tprivate readonly usersService: UsersService,\n\t\tprivate readonly jwtService: JwtService,\n\t) {}\n\n\tasync signIn(email: Email, pass: string): Promise<TokenDTO> {\n\t\tconst user: User = await this.usersService.findOne({ email: email }, false);\n\n\t\tif (user.password !== pass && !compareSync(pass, user.password)) {\n\t\t\tthrow new UnauthorizedException('Password mismatch');\n\t\t}\n\n\t\tconst payload = { sub: user.id, email: user.email };\n\t\treturn {\n\t\t\ttoken: await this.jwtService.signAsync(payload),\n\t\t\tuser_id: user.id,\n\t\t};\n\t}\n\n\t/**\n\t * Validate the user from the payload\n\t * @param {JWTPayload} payload JWT Payload to validate\n\t * @returns {User} The user if found and valid, throw otherwise (email not verified)\n\t */\n\tasync validateUser(payload: JWTPayload): Promise<User> {\n\t\tconst user = await this.usersService.findOne({ email: payload.email }, false);\n\n\t\t// throw if user not verified\n\t\tif (!user.email_verified) throw new UnauthorizedException(emailNotVerified({ i18n: this.i18n, type: User }));\n\t\treturn user;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/token.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/sign-in.dto.ts",{"fileContent":"import type { UserSignInDto, Email } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UserSignInDTO implements UserSignInDto {\n\t@ApiProperty({ type: String })\n\t@IsString()\n\temail: Email;\n\n\t@ApiProperty()\n\t@IsString()\n\tpassword: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/token.dto.ts",{"fileContent":"import type { UserTokenDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\n\nexport class TokenDTO implements UserTokenDto {\n\t@ApiProperty()\n\t@IsString()\n\ttoken: string;\n\n\t@ApiProperty({ minimum: 1 })\n\t@IsInt()\n\tuser_id: number;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/auth/strategies/jwt.strategy.ts",{"fileContent":"import type { I18nTranslations, JWTPayload } from '@types';\n\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { I18nService } from 'nestjs-i18n';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { authInvalidPayload } from '@utils/responses';\n\nimport { AuthService } from '../auth.service';\n\n/**\n * Strategy used to validate the user from the JWT payload\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\tconstructor(\n\t\tprivate readonly i18n: I18nService<I18nTranslations>,\n\t\tprivate readonly configService: ConfigService,\n\t\tprivate readonly authService: AuthService,\n\t) {\n\t\tsuper({\n\t\t\tjwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n\t\t\tignoreExpiration: false,\n\t\t\tsecretOrKey: configService.get<string>('auth.jwtKey'),\n\t\t\tsignOptions: { expiresIn: configService.get<number>('auth.jwtExpirationTime') },\n\t\t});\n\t}\n\n\t/**\n\t * Validate the user from the payload\n\t * @param payload - The payload from the JWT\n\t */\n\tasync validate(payload: JWTPayload) {\n\t\tconst user = await this.authService.validateUser(payload);\n\n\t\tif (!user) throw new UnauthorizedException(authInvalidPayload({ i18n: this.i18n }));\n\t\treturn user;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/auth.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/token.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/logs/interceptor/logging.interceptor.ts",{"fileContent":"import type { IncomingMessage, ServerResponse } from 'http';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { tap, type Observable } from 'rxjs';\n\nimport { User } from '@modules/users/entities/user.entity';\n\nimport { Log } from '../entities/log.entity';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n\tconstructor(private readonly orm: MikroORM) {}\n\n\t@UseRequestContext()\n\tasync intercept(context: ExecutionContext, next: CallHandler): Promise<Observable<unknown>> {\n\t\ttype Req = IncomingMessage & {\n\t\t\troute: { path: string };\n\t\t\tuser: User;\n\t\t\tparams: Record<string, string>;\n\t\t\tquery: Record<string, string>;\n\t\t\tbody: Record<string, string>;\n\t\t\tip: string;\n\t\t};\n\n\t\tconst request = context.switchToHttp().getRequest<Req>();\n\t\tconst user_id = request.user ? request.user.id : 'Guest';\n\n\t\t// No need to log guest users\n\t\tif (user_id === 'Guest') return next.handle();\n\n\t\t// Create a separate entity manager for this request\n\t\t// > to avoid conflicts with the main entity manager (in the request scope)\n\t\tconst em = this.orm.em.fork();\n\n\t\t// Create a new log entry\n\t\tconst user = await em.findOne(User, { id: user_id });\n\t\tconst log = em.create(Log, {\n\t\t\tuser,\n\t\t\taction: context.getClass().name + '.' + context.getHandler().name,\n\t\t\tip: request.ip.replace('::1', '127.0.0.1'),\n\t\t\tuser_agent: request.headers['user-agent'] ?? 'Unknown',\n\t\t\troute: request.route.path,\n\t\t\tmethod: request.method,\n\t\t\tbody: request.body as unknown as string,\n\t\t\tquery: request.query as unknown as string,\n\t\t\tparams: request.params as unknown as string,\n\t\t\tupdated_at: undefined,\n\t\t});\n\n\t\treturn next.handle().pipe(\n\t\t\ttap({\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\t\t\t\tfinalize: async () => {\n\t\t\t\t\ttype Res = ServerResponse & {\n\t\t\t\t\t\tbody: Record<string, string>;\n\t\t\t\t\t\terror: string;\n\t\t\t\t\t\terror_stack: string;\n\t\t\t\t\t\terror_message: string;\n\t\t\t\t\t};\n\t\t\t\t\tconst response = context.switchToHttp().getResponse<Res>();\n\n\t\t\t\t\t// Update the log entity after the observable is ended\n\t\t\t\t\tlog.response = response.body as unknown as string; // TODO: Get the actual response body (actually null)\n\t\t\t\t\tlog.status_code = response.statusCode;\n\t\t\t\t\tlog.error = response.error;\n\t\t\t\t\tlog.error_stack = response.error_stack;\n\t\t\t\t\tlog.error_message = response.error_message;\n\t\t\t\t\tlog.updated_at = new Date();\n\n\t\t\t\t\tawait em.flush();\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.module.ts",{"fileContent":"import { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\nimport { Log } from './entities/log.entity';\nimport { LogsController } from './logs.controller';\nimport { LogsService } from './logs.service';\n\n@Module({\n\timports: [MikroOrmModule.forFeature([Log])],\n\tproviders: [LogsService, UsersService, JwtService],\n\tcontrollers: [LogsController],\n\texports: [LogsService],\n})\nexport class LogsModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/message-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self-or-perms.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self-or-perms.guard.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.controller.ts",{"fileContent":"import { Controller, Delete, Get, Param, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n\tApiTags,\n\tApiBearerAuth,\n\tApiNotFoundResponse,\n\tApiBadRequestResponse,\n\tApiOkResponse,\n\tApiParam,\n\tApiOperation,\n} from '@nestjs/swagger';\n\nimport { MessageResponseDTO } from '@modules/_mixin/dto/message-response.dto';\nimport { GuardPermissions } from '@modules/auth/decorators/permissions.decorator';\nimport { GuardSelfOrPermissions } from '@modules/auth/decorators/self-or-perms.decorator';\nimport { PermissionGuard } from '@modules/auth/guards/permission.guard';\nimport { SelfOrPermissionGuard } from '@modules/auth/guards/self-or-perms.guard';\n\nimport { Log } from './entities/log.entity';\nimport { LogsService } from './logs.service';\n\n@Controller('logs')\n@UseGuards(AuthGuard('jwt'))\n@ApiTags('Logs')\n@ApiBearerAuth()\nexport class LogsController {\n\tconstructor(private readonly logsService: LogsService) {}\n\n\t@Get('user/:id')\n\t@UseGuards(SelfOrPermissionGuard)\n\t@GuardSelfOrPermissions('id', ['CAN_READ_LOGS_OF_USER'])\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiBadRequestResponse({ description: 'Invalid user ID' })\n\t@ApiOkResponse({ description: 'User logs retrieved', type: [Log] })\n\t@ApiParam({ name: 'id', description: 'The user ID' })\n\t@ApiOperation({ summary: 'Get all logs of a user' })\n\tgetUserLogs(@Param('id') id: number) {\n\t\treturn this.logsService.getUserLogs(id);\n\t}\n\n\t@Delete('user/:id')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_DELETE_LOGS_OF_USER')\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiBadRequestResponse({ description: 'Invalid user ID' })\n\t@ApiOkResponse({ description: 'User logs deleted', type: MessageResponseDTO })\n\t@ApiParam({ name: 'id', description: 'The user ID' })\n\t@ApiOperation({ summary: 'Delete all logs of a user' })\n\tdeleteUserLogs(@Param('id') id: number) {\n\t\treturn this.logsService.deleteUserLogs(id);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/message-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self-or-perms.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self-or-perms.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/self.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/self.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/message-response.dto.ts",{"fileContent":"import type { MessageResponseDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class MessageResponseDTO implements MessageResponseDto {\n\t@ApiProperty()\n\t@IsString()\n\tmessage: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/logs/logs.service.ts",{"fileContent":"import type { I18nTranslations } from '@types';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { I18nService } from 'nestjs-i18n';\n\nimport { User } from '@modules/users/entities/user.entity';\nimport { UsersService } from '@modules/users/users.service';\nimport { idInvalid } from '@utils/responses';\n\nimport { Log } from './entities/log.entity';\n\n@Injectable()\nexport class LogsService {\n\tconstructor(\n\t\tprivate readonly usersService: UsersService,\n\t\tprivate readonly i18n: I18nService<I18nTranslations>,\n\t\tprivate readonly orm: MikroORM,\n\t) {}\n\n\t/**\n\t * Remove all logs that are older than 2 months each day at 7am\n\t */\n\t@Cron('0 0 7 * * *')\n\t@UseRequestContext()\n\tasync handleCron() {\n\t\tawait this.orm.em.nativeDelete(Log, { created_at: { $lt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 60) } });\n\t}\n\n\tasync getUserLogs(id: number) {\n\t\tif (typeof id === 'string' && parseInt(id, 10) != id)\n\t\t\tthrow new BadRequestException(idInvalid({ i18n: this.i18n, type: User, id }));\n\n\t\tconst user = await this.usersService.findOne({ id });\n\n\t\tawait user.logs.init();\n\t\treturn user.logs.getItems();\n\t}\n\n\tasync deleteUserLogs(id: number) {\n\t\tconst user = await this.usersService.findOne({ id });\n\t\tawait user.logs.init();\n\t\tuser.logs.removeAll();\n\n\t\treturn { message: 'User logs deleted' };\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.module.ts",{"fileContent":"import { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\nimport { Permission } from './entities/permission.entity';\nimport { PermissionsController } from './permissions.controller';\nimport { PermissionsService } from './permissions.service';\n\n@Module({\n\timports: [MikroOrmModule.forFeature([Permission])],\n\tproviders: [PermissionsService, JwtService, UsersService],\n\tcontrollers: [PermissionsController],\n\texports: [PermissionsService],\n})\nexport class PermissionsModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/post.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.controller.ts",{"fileContent":"import { Body, Controller, Get, Param, Post, UseGuards, Patch } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n\tApiBearerAuth,\n\tApiNotFoundResponse,\n\tApiOkResponse,\n\tApiOperation,\n\tApiParam,\n\tApiTags,\n\tApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\nimport { GuardPermissions } from '@modules/auth/decorators/permissions.decorator';\nimport { PermissionGuard } from '@modules/auth/guards/permission.guard';\nimport { Role } from '@modules/roles/entities/role.entity';\n\nimport { PermissionPatchDTO } from './dto/patch.dto';\nimport { PermissionPostDTO } from './dto/post.dto';\nimport { Permission } from './entities/permission.entity';\nimport { PermissionsService } from './permissions.service';\n\n@Controller('permissions')\n@UseGuards(AuthGuard('jwt'))\n@ApiTags('Permissions')\n@ApiBearerAuth()\nexport class PermissionsController {\n\tconstructor(private readonly permsService: PermissionsService) {}\n\n\t@Post('user')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_PERMISSIONS_OF_USER')\n\t@ApiOperation({ summary: 'Add a permission to a user' })\n\t@ApiOkResponse({ description: 'The added permission', type: Permission })\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\taddToUser(@Body() body: PermissionPostDTO): Promise<Permission> {\n\t\treturn this.permsService.addPermissionToUser(body.permission, body.id, body.expires);\n\t}\n\n\t@Patch('user')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_PERMISSIONS_OF_USER')\n\t@ApiOperation({ summary: 'Edit permission of a user' })\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiOkResponse({ description: 'The modified user permission', type: Permission })\n\tremovePermissionFromUser(@Body() body: PermissionPatchDTO) {\n\t\treturn this.permsService.editPermissionOfUser(body.id, body);\n\t}\n\n\t@Get('user/:id')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PERMISSIONS_OF_USER')\n\t@ApiOperation({ summary: 'Get all permissions of a user (active, revoked and expired)' })\n\t@ApiNotFoundResponse({ description: 'User not found' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiOkResponse({ description: 'User permissions retrieved', type: [Permission] })\n\t@ApiParam({ name: 'id', description: 'The user ID' })\n\tgetUserPermissions(@Param('id') id: number) {\n\t\treturn this.permsService.getPermissionsOfUser(id, { show_expired: true, show_revoked: true });\n\t}\n\n\t@Post('role')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_PERMISSIONS_OF_ROLE')\n\t@ApiOperation({ summary: 'Add a permission to a role' })\n\t@ApiOkResponse({ description: 'Permission added to role', type: Role })\n\t@ApiNotFoundResponse({ description: 'Role not found' })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\taddToRole(@Body() body: PermissionPostDTO) {\n\t\treturn this.permsService.addPermissionToRole(body.permission, body.id);\n\t}\n\n\t@Get('role/:id')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PERMISSIONS_OF_ROLE')\n\t@ApiOperation({ summary: 'Get all permissions of a role' })\n\t@ApiNotFoundResponse({ description: 'Role not found' })\n\t@ApiOkResponse({ description: 'Role permissions retrieved', type: String, isArray: true })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiParam({ name: 'id', description: 'The role ID' })\n\tgetRolePermissions(@Param('id') id: number) {\n\t\treturn this.permsService.getPermissionsOfRole(id);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/post.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/patch.dto.ts",{"fileContent":"import type { PermissionName, PermissionPatchDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString, IsDate, IsBoolean } from 'class-validator';\n\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nexport class PermissionPatchDTO implements PermissionPatchDto {\n\t@ApiProperty({ required: true, minimum: 1 })\n\t@IsInt()\n\tid: number;\n\n\t@ApiProperty({ enum: PERMISSIONS_NAMES })\n\t@IsString()\n\tname: PermissionName;\n\n\t@ApiProperty()\n\t@IsDate()\n\texpires: Date;\n\n\t@ApiProperty()\n\t@IsBoolean()\n\trevoked: boolean;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/post.dto.ts",{"fileContent":"import type { PermissionName, PermissionsPostDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsInt, IsString } from 'class-validator';\n\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nexport class PermissionPostDTO implements PermissionsPostDto {\n\t@ApiProperty()\n\t@IsInt()\n\tid: number;\n\n\t@ApiProperty({ enum: PERMISSIONS_NAMES })\n\t@IsString()\n\tpermission: PermissionName;\n\n\t@ApiProperty()\n\t@IsDate()\n\texpires: Date;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/permissions/permissions.service.ts",{"fileContent":"import type { PermissionName } from '@types';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nimport { PermissionPatchDTO } from './dto/patch.dto';\nimport { Permission } from './entities/permission.entity';\nimport { Role } from '../roles/entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class PermissionsService {\n\tconstructor(private readonly orm: MikroORM) {}\n\n\t/**\n\t * Automatically revoke permissions that have expired\n\t * Runs every 10 minutes\n\t */\n\t@Cron('0 */10 * * * *')\n\t@UseRequestContext()\n\tasync revokeExpiredPermissions(): Promise<void> {\n\t\tconst permissions = await this.orm.em.find(Permission, { expires: { $lte: new Date() }, revoked: false });\n\t\tif (!permissions.length) return;\n\n\t\tpermissions.forEach((role) => {\n\t\t\trole.revoked = true;\n\t\t\trole.updated_at = new Date();\n\t\t});\n\n\t\tawait this.orm.em.persistAndFlush(permissions);\n\t}\n\n\t/**\n\t * Add a permission to a user\n\t * @param {PermissionName} name The permission name in caps\n\t * @param {number} user_id To which user the permission should be added\n\t * @param {Date} expires When the permission should expire\n\t * @returns {Promise<Permission>} The created permission\n\t */\n\t@UseRequestContext()\n\tasync addPermissionToUser(name: PermissionName, user_id: number, expires: Date): Promise<Permission> {\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException(`User with id '${user_id}' not found`);\n\t\tif (!PERMISSIONS_NAMES.includes(name)) throw new BadRequestException(`Permission '${name}' does not exist`);\n\n\t\tconst permission = this.orm.em.create(Permission, { name, user, expires, revoked: false });\n\n\t\tawait this.orm.em.persistAndFlush(permission);\n\t\treturn permission;\n\t}\n\n\t/**\n\t * Add a permission to an existing role\n\t * @param {PermissionName} name The permission name in caps\n\t * @param {number} role_id the role id to which the permission should be added\n\t * @returns {Promise<Role>}\n\t */\n\t@UseRequestContext()\n\tasync addPermissionToRole(name: PermissionName, role_id: number): Promise<Role> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException(`Role with id '${role_id}' not found`);\n\t\tif (!PERMISSIONS_NAMES.includes(name)) throw new BadRequestException(`Permission '${name}' does not exist`);\n\n\t\tif (!role.permissions.includes(name)) {\n\t\t\trole.permissions.push(name);\n\t\t\tawait this.orm.em.persistAndFlush(role);\n\t\t}\n\n\t\treturn role;\n\t}\n\n\t/**\n\t * Get all permissions of a user\n\t * @param input Arguments for the query\n\t * @returns {Promise<Permission[]>} The permissions of the user\n\t */\n\t@UseRequestContext()\n\tasync getPermissionsOfUser(\n\t\tid: number,\n\t\tinput?: { show_expired: boolean; show_revoked: boolean },\n\t): Promise<Permission[]> {\n\t\tconst user = await this.orm.em.findOne(User, { id });\n\t\tif (!user) throw new NotFoundException('User not found');\n\n\t\tconst perms = await user.permissions.loadItems();\n\n\t\tif (input && !input.show_expired) perms.filter((p) => p.expires > new Date());\n\t\tif (input && !input.show_revoked) perms.filter((p) => p.revoked === false);\n\n\t\treturn perms;\n\t}\n\n\t/**\n\t * Get all permissions attached to a role\n\t * @param {number} role_id The role id\n\t * @returns {Promise<PermissionName[]>} The permissions of the role\n\t */\n\t@UseRequestContext()\n\tasync getPermissionsOfRole(role_id: number): Promise<PermissionName[]> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException('Role not found');\n\n\t\treturn role.permissions;\n\t}\n\n\t@UseRequestContext()\n\tasync editPermissionOfUser(user_id: number, modified: PermissionPatchDTO): Promise<Permission> {\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException('User not found');\n\n\t\tconst perm = await this.orm.em.findOne(Permission, { id: modified.id });\n\t\tif (!perm) throw new NotFoundException('Permission not found on this user');\n\n\t\tif (modified.name) perm.name = modified.name;\n\t\tif (modified.expires) perm.expires = modified.expires;\n\t\tif (modified.revoked) perm.revoked = modified.revoked;\n\n\t\tawait this.orm.em.persistAndFlush(perm);\n\t\treturn perm;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.module.ts",{"fileContent":"import { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\nimport { Promotion } from './entities/promotion.entity';\nimport { PromotionsController } from './promotions.controller';\nimport { PromotionsService } from './promotions.service';\n\n@Module({\n\timports: [MikroOrmModule.forFeature([Promotion])],\n\tproviders: [PromotionsService, JwtService, UsersService],\n\tcontrollers: [PromotionsController],\n\texports: [PromotionsService],\n})\nexport class PromotionsModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/dto/promotion.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.controller.ts",{"fileContent":"import {\n\tController,\n\tDelete,\n\tGet,\n\tParam,\n\tPost,\n\tStreamableFile,\n\tUploadedFile,\n\tUseGuards,\n\tUseInterceptors,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiOkResponse, ApiOperation, ApiParam, ApiTags } from '@nestjs/swagger';\n\nimport { GuardPermissions } from '@modules/auth/decorators/permissions.decorator';\nimport { PermissionGuard } from '@modules/auth/guards/permission.guard';\nimport { getStreamableFile } from '@utils/images';\n\nimport { PromotionResponseDTO } from './dto/promotion.dto';\nimport { PromotionsService } from './promotions.service';\nimport { BaseUserResponseDTO } from '../users/dto/base-user.dto';\n\n@ApiTags('Promotions')\n@Controller('promotions')\n@UseGuards(AuthGuard('jwt'))\n@ApiBearerAuth()\nexport class PromotionsController {\n\tconstructor(private readonly promotionsService: PromotionsService) {}\n\n\t@Get()\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PROMOTION')\n\t@ApiOkResponse({ type: [PromotionResponseDTO] })\n\t@ApiOperation({ summary: 'Get all promotions' })\n\tasync getAll() {\n\t\treturn this.promotionsService.findAll();\n\t}\n\n\t@Get(':number')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PROMOTION')\n\t@ApiOkResponse({ type: PromotionResponseDTO })\n\t@ApiParam({ name: 'number', description: 'The promotion number (eg: 21)' })\n\t@ApiOperation({ summary: 'Get the specified promotion' })\n\tasync get(@Param('number') number: number) {\n\t\treturn this.promotionsService.findOne(number);\n\t}\n\n\t@Get(':number/users')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PROMOTION')\n\t@ApiOkResponse({ type: [BaseUserResponseDTO] })\n\t@ApiParam({ name: 'number', description: 'The promotion number (eg: 21)' })\n\t@ApiOperation({ summary: 'Get users of the specified promotions' })\n\tasync getUsers(@Param('number') number: number) {\n\t\treturn this.promotionsService.getUsers(number);\n\t}\n\n\t@Get('latest')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PROMOTION')\n\t@ApiOkResponse({ type: PromotionResponseDTO })\n\t@ApiOperation({ summary: 'Get the latest promotion created' })\n\tasync getLatest() {\n\t\treturn this.promotionsService.findLatest();\n\t}\n\n\t@Post('logo/:number')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_PROMOTION')\n\t@ApiConsumes('multipart/form-data')\n\t@ApiParam({ name: 'number', description: 'The promotion number (eg: 21)' })\n\t@ApiOperation({ summary: 'Update the promotion logo' })\n\t@ApiBody({\n\t\tschema: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tfile: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tformat: 'binary',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\t@UseInterceptors(FileInterceptor('file'))\n\tasync editLogo(@UploadedFile() file: Express.Multer.File, @Param('number') number: number) {\n\t\treturn this.promotionsService.updateLogo({ number, file });\n\t}\n\n\t@Get('logo/:number')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_PROMOTION')\n\t@ApiParam({ name: 'number', description: 'The promotion number (eg: 21)' })\n\t@ApiOperation({ summary: 'Get the promotion logo' })\n\tasync getLogo(@Param('number') number: number) {\n\t\tconst logo = await this.promotionsService.getLogo(number);\n\t\treturn new StreamableFile(getStreamableFile(logo.path));\n\t}\n\n\t@Delete('logo/:number')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_PROMOTION')\n\t@ApiParam({ name: 'number', description: 'The promotion number (eg: 21)' })\n\t@ApiOperation({ summary: 'Delete the promotion logo' })\n\tasync deleteLogo(@Param('number') number: number) {\n\t\treturn this.promotionsService.deleteLogo(number);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/dto/promotion.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/dto/promotion.dto.ts",{"fileContent":"import type { PromotionResponseDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseResponseDTO } from '@modules/_mixin/dto/base-response.dto';\n\nimport { PromotionPicture } from '../entities/promotion-picture.entity';\n\nexport class PromotionResponseDTO extends BaseResponseDTO implements PromotionResponseDto {\n\t@ApiProperty()\n\tnumber: number;\n\n\t@ApiProperty()\n\tusers: number;\n\n\t@ApiProperty({ required: false })\n\tpicture?: PromotionPicture;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts",{"fileContent":"import { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseResponseDto } from '@types';\n\nexport class BaseResponseDTO implements BaseResponseDto {\n\t@ApiProperty({ minimum: 1 })\n\tid: number;\n\n\t@ApiProperty()\n\tupdated_at: Date;\n\n\t@ApiProperty()\n\tcreated_at: Date;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/promotions/promotions.service.ts",{"fileContent":"import fs from 'fs';\nimport { join } from 'path';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { HttpException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Cron } from '@nestjs/schedule';\n\nimport { convertToWebp, isSquare } from '@utils/images';\n\nimport { PromotionResponseDTO } from './dto/promotion.dto';\nimport { PromotionPicture } from './entities/promotion-picture.entity';\nimport { Promotion } from './entities/promotion.entity';\nimport { BaseUserResponseDTO } from '../users/dto/base-user.dto';\n\n@Injectable()\nexport class PromotionsService {\n\tconstructor(private readonly orm: MikroORM, private readonly configService: ConfigService) {}\n\n\t/**\n\t * Create a new promotion each year on the 15th of July\n\t */\n\t@Cron('0 0 0 15 7 *')\n\t@UseRequestContext()\n\tasync createNewPromotion(): Promise<void> {\n\t\tconst latest = await this.findLatest();\n\t\tconst newPromotion = this.orm.em.create(Promotion, { number: latest.number + 1 });\n\n\t\tawait this.orm.em.persistAndFlush(newPromotion);\n\t}\n\n\t@UseRequestContext()\n\tasync findAll(): Promise<PromotionResponseDTO[]> {\n\t\tconst promotions = await this.orm.em.find(Promotion, {}, { fields: ['*', 'picture', 'users'] });\n\t\tconst res: PromotionResponseDTO[] = [];\n\n\t\tfor (const promotion of promotions) {\n\t\t\tres.push({ ...promotion, users: promotion.users.count() ?? 0 });\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t@UseRequestContext()\n\tasync findLatest(): Promise<PromotionResponseDTO> {\n\t\tconst promotion = (\n\t\t\tawait this.orm.em.find(Promotion, {}, { orderBy: { number: 'DESC' }, fields: ['*', 'picture', 'users'] })\n\t\t)[0];\n\n\t\treturn {\n\t\t\t...promotion,\n\t\t\tusers: promotion.users.count() ?? 0,\n\t\t};\n\t}\n\n\t@UseRequestContext()\n\tasync findOne(number: number): Promise<PromotionResponseDTO> {\n\t\tconst promotion = await this.orm.em.findOne(Promotion, { number }, { fields: ['*', 'picture', 'users'] });\n\t\tif (!promotion) throw new NotFoundException(`Promotion with number ${number} not found`);\n\n\t\treturn {\n\t\t\t...promotion,\n\t\t\tusers: promotion.users.count() ?? 0,\n\t\t};\n\t}\n\n\t@UseRequestContext()\n\tasync getUsers(number: number): Promise<BaseUserResponseDTO[]> {\n\t\tconst promotion = await this.orm.em.findOne(Promotion, { number }, { fields: ['users'] });\n\t\tif (!promotion) throw new NotFoundException(`Promotion with number ${number} not found`);\n\n\t\tconst res: BaseUserResponseDTO[] = [];\n\n\t\tfor (const user of promotion.users.getItems()) {\n\t\t\tres.push({\n\t\t\t\tid: user.id,\n\t\t\t\tupdated_at: user.updated_at,\n\t\t\t\tcreated_at: user.created_at,\n\t\t\t\tfirst_name: user.first_name,\n\t\t\t\tlast_name: user.last_name,\n\t\t\t\tnickname: user.nickname,\n\t\t\t});\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t@UseRequestContext()\n\tasync updateLogo({ number, file }: { number: number; file: Express.Multer.File }) {\n\t\tconst promotion = await this.orm.em.findOneOrFail(Promotion, { number });\n\t\tif (promotion.picture) await promotion.picture.init();\n\n\t\tconst { buffer, mimetype } = file;\n\t\tconst imageDir = join(this.configService.get<string>('files.promotions'), 'logo');\n\t\tconst extension = mimetype.replace('image/', '.');\n\t\tconst filename = `${promotion.number}${extension}`;\n\t\tconst imagePath = join(imageDir, filename);\n\n\t\t// write the file\n\t\tfs.mkdirSync(imageDir, { recursive: true });\n\t\tfs.writeFileSync(imagePath, buffer);\n\n\t\tif (!(await isSquare(imagePath))) {\n\t\t\tfs.unlinkSync(imagePath);\n\t\t\tthrow new HttpException('The logo must be square', HttpStatus.BAD_REQUEST);\n\t\t}\n\n\t\t// remove the old picture (if any)\n\t\tif (promotion.picture && promotion.picture.path && promotion.picture.path !== imagePath)\n\t\t\tfs.unlinkSync(promotion.picture.path);\n\n\t\t// convert to webp\n\t\tfs.createWriteStream(await convertToWebp(imagePath));\n\n\t\t// update the database\n\t\tif (!promotion.picture)\n\t\t\tpromotion.picture = this.orm.em.create(PromotionPicture, {\n\t\t\t\tfilename,\n\t\t\t\tmimetype,\n\t\t\t\tpath: imagePath.replace(extension, '.webp'),\n\t\t\t\tpromotion,\n\t\t\t\tsize: buffer.byteLength,\n\t\t\t\tvisibility: 'public',\n\t\t\t});\n\t\telse {\n\t\t\tpromotion.picture.filename = filename;\n\t\t\tpromotion.picture.mimetype = 'image/webp';\n\t\t\tpromotion.picture.updated_at = new Date();\n\t\t\tpromotion.picture.size = buffer.byteLength;\n\t\t\tpromotion.picture.path = imagePath.replace(extension, '.webp');\n\t\t}\n\n\t\tawait this.orm.em.persistAndFlush(promotion);\n\t}\n\n\t@UseRequestContext()\n\tasync getLogo(number: number) {\n\t\tconst promotion = await this.orm.em.findOneOrFail(Promotion, { number });\n\t\tif (!promotion.picture) throw new HttpException('This promotion has no logo', HttpStatus.NOT_FOUND);\n\n\t\tawait promotion.picture.init();\n\t\treturn promotion.picture;\n\t}\n\n\t@UseRequestContext()\n\tasync deleteLogo(number: number) {\n\t\tconst promotion = await this.orm.em.findOneOrFail(Promotion, { number });\n\t\tif (!promotion.picture) throw new HttpException('This promotion has no logo', HttpStatus.NOT_FOUND);\n\n\t\tawait promotion.picture.init();\n\t\tfs.unlinkSync(promotion.picture.path);\n\t\tawait this.orm.em.remove(promotion.picture).flush();\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/dto/promotion.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/file.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts",{"fileContent":"import { ApiProperty } from '@nestjs/swagger';\n\nimport { BaseResponseDTO } from '@modules/_mixin/dto/base-response.dto';\nimport { User } from '@modules/users/entities/user.entity';\n\nexport class BaseUserResponseDTO\n\textends BaseResponseDTO\n\timplements Pick<User, 'first_name' | 'last_name' | 'nickname'>\n{\n\t@ApiProperty()\n\tfirst_name: string;\n\n\t@ApiProperty()\n\tlast_name: string;\n\n\t@ApiProperty()\n\tnickname?: string;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.module.ts",{"fileContent":"import { MikroOrmModule } from '@mikro-orm/nestjs';\nimport { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '@modules/users/users.service';\n\nimport { Role } from './entities/role.entity';\nimport { RolesController } from './roles.controller';\nimport { RolesService } from './roles.service';\n\n@Module({\n\timports: [MikroOrmModule.forFeature([Role])],\n\tproviders: [RolesService, JwtService, UsersService],\n\tcontrollers: [RolesController],\n\texports: [RolesService],\n})\nexport class RolesModule {}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.controller.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/dto/register.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-visibility.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/utils/dates.ts","/Users/juknum/Documents/Code/AE/api/src/utils/email.ts","/Users/juknum/Documents/Code/AE/api/src/utils/images.ts","/Users/juknum/Documents/Code/AE/api/src/utils/password.ts","/Users/juknum/Documents/Code/AE/api/src/utils/responses.ts","/Users/juknum/Documents/Code/AE/api/src/utils/template.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/post.dto.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.controller.ts",{"fileContent":"import { Body, Controller, Delete, Get, Param, Patch, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport {\n\tApiTags,\n\tApiBearerAuth,\n\tApiOkResponse,\n\tApiUnauthorizedResponse,\n\tApiOperation,\n\tApiBadRequestResponse,\n\tApiNotFoundResponse,\n} from '@nestjs/swagger';\n\nimport { GuardPermissions } from '@modules/auth/decorators/permissions.decorator';\nimport { PermissionGuard } from '@modules/auth/guards/permission.guard';\nimport { BaseUserResponseDTO } from '@modules/users/dto/base-user.dto';\n\nimport { RolePatchDTO } from './dto/patch.dto';\nimport { RolePostDTO } from './dto/post.dto';\nimport { Role } from './entities/role.entity';\nimport { RolesService } from './roles.service';\n\n@ApiTags('Roles')\n@Controller('roles')\n@UseGuards(AuthGuard('jwt'))\n@ApiBearerAuth()\nexport class RolesController {\n\tconstructor(private readonly rolesService: RolesService) {}\n\n\t@Post()\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_ROLE')\n\t@ApiOperation({ summary: 'Create a new role' })\n\t@ApiOkResponse({ type: Role })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiBadRequestResponse({ description: 'Role name is not uppercase or already exists' })\n\tasync createRole(@Body() body: RolePostDTO) {\n\t\treturn this.rolesService.createRole(body.name, body.permissions, body.expires);\n\t}\n\n\t@Patch()\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_ROLE')\n\t@ApiOperation({ summary: 'Update an existing role' })\n\t@ApiOkResponse({ type: Role })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiBadRequestResponse({ description: 'Role name is not uppercase' })\n\t@ApiNotFoundResponse({ description: 'Role not found' })\n\tasync editRole(@Body() body: RolePatchDTO) {\n\t\treturn this.rolesService.editRole(body);\n\t}\n\n\t@Get()\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_ROLE')\n\t@ApiOperation({ summary: 'Get all existing roles' })\n\t@ApiOkResponse({ type: [Role] })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\tasync getAllRoles() {\n\t\treturn this.rolesService.getAllRoles({ show_expired: true, show_revoked: true });\n\t}\n\n\t@Get(':role_id/users')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_READ_ROLE')\n\t@ApiOperation({ summary: 'Get user of the specified role' })\n\t@ApiOkResponse({ type: [BaseUserResponseDTO] })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiNotFoundResponse({ description: 'Role not found' })\n\tasync getRoleUsers(@Param('role_id') id: number) {\n\t\treturn this.rolesService.getUsers(id);\n\t}\n\n\t@Post(':role_id/users/:user_id')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_ROLE')\n\t@ApiOperation({ summary: 'Add a user to the role' })\n\t@ApiOkResponse({ type: [BaseUserResponseDTO] })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiNotFoundResponse({ description: 'Role or user not found' })\n\tasync addUserToRole(@Param('role_id') role_id: number, @Param('user_id') user_id: number) {\n\t\treturn this.rolesService.addUser(role_id, user_id);\n\t}\n\n\t@Delete(':role_id/users/:user_id')\n\t@UseGuards(PermissionGuard)\n\t@GuardPermissions('CAN_EDIT_ROLE')\n\t@ApiOperation({ summary: 'Remove a user from the role' })\n\t@ApiOkResponse({ type: [BaseUserResponseDTO] })\n\t@ApiUnauthorizedResponse({ description: 'Insufficient permission' })\n\t@ApiNotFoundResponse({ description: 'Role or user not found' })\n\tasync removeUserToRole(@Param('role_id') role_id: number, @Param('user_id') user_id: number) {\n\t\treturn this.rolesService.removeUser(role_id, user_id);\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/modules/auth/decorators/permissions.decorator.ts","/Users/juknum/Documents/Code/AE/api/src/modules/auth/guards/permission.guard.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/post.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.service.ts","/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/users.service.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/patch.dto.ts",{"fileContent":"import type { RolePatchDto } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber } from 'class-validator';\n\nimport { RolePostDTO } from './post.dto';\n\nexport class RolePatchDTO extends RolePostDTO implements RolePatchDto {\n\t@ApiProperty({ required: true, minimum: 1 })\n\t@IsNumber()\n\tid: number;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/post.dto.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/post.dto.ts",{"fileContent":"import type { RolePostDto, PermissionName } from '@types';\n\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsDate, IsString } from 'class-validator';\n\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nexport class RolePostDTO implements RolePostDto {\n\t@ApiProperty({ type: String, example: 'AE_ADMINS' })\n\t@IsString()\n\tname: Uppercase<string>;\n\n\t@ApiProperty({ enum: PERMISSIONS_NAMES, isArray: true })\n\t@IsString()\n\tpermissions: PermissionName[];\n\n\t@ApiProperty()\n\t@IsDate()\n\texpires: Date;\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts"]}],["/Users/juknum/Documents/Code/AE/api/src/modules/roles/roles.service.ts",{"fileContent":"import type { PermissionName } from '@types';\n\nimport { MikroORM, UseRequestContext } from '@mikro-orm/core';\nimport { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\nimport { BaseUserResponseDTO } from '@modules/users/dto/base-user.dto';\nimport { User } from '@modules/users/entities/user.entity';\nimport { PERMISSIONS_NAMES } from 'src/types/api/permissions/perms';\n\nimport { RolePatchDTO } from './dto/patch.dto';\nimport { Role } from './entities/role.entity';\n\n@Injectable()\nexport class RolesService {\n\tconstructor(private readonly orm: MikroORM) {}\n\n\t/**\n\t * Automatically revoke roles that have expired\n\t * Runs every 10 minutes\n\t */\n\t@Cron('0 */10 * * * *')\n\t@UseRequestContext()\n\tasync revokeExpiredRoles(): Promise<void> {\n\t\tconst roles = await this.orm.em.find(Role, { expires: { $lte: new Date() }, revoked: false });\n\t\tif (!roles.length) return;\n\n\t\troles.forEach((role) => {\n\t\t\trole.revoked = true;\n\t\t\trole.updated_at = new Date();\n\t\t});\n\n\t\tawait this.orm.em.persistAndFlush(roles);\n\t}\n\n\t/**\n\t * Get all roles from the database and filter them according to the input\n\t * @param input Input to filter the roles\n\t * @returns {Promise<Role[]>} Array of roles\n\t */\n\t@UseRequestContext()\n\tasync getAllRoles(input: { show_expired: boolean; show_revoked: boolean }): Promise<Role[]> {\n\t\tconst roles = await this.orm.em.find(Role, {});\n\n\t\tif (!input.show_expired) roles.filter((p) => p.expires > new Date());\n\t\tif (!input.show_revoked) roles.filter((p) => p.revoked === false);\n\n\t\treturn roles;\n\t}\n\n\t@UseRequestContext()\n\tasync createRole(name: Uppercase<string>, permissions: PermissionName[], expires: Date) {\n\t\tif (name.toUpperCase() !== name) throw new BadRequestException('Role name must be uppercase');\n\t\tif (await this.orm.em.findOne(Role, { name }))\n\t\t\tthrow new BadRequestException(`Role with name ${name} already exists`);\n\n\t\tpermissions.forEach((p) => {\n\t\t\tif (!PERMISSIONS_NAMES.includes(p)) throw new BadRequestException(`Permission ${p} does not exist`);\n\t\t});\n\n\t\tconst role = this.orm.em.create(Role, { name, permissions, expires });\n\t\tawait this.orm.em.persistAndFlush(role);\n\n\t\treturn { ...role, users: undefined };\n\t}\n\n\t@UseRequestContext()\n\tasync editRole(input: RolePatchDTO): Promise<Omit<Role, 'users'> & { users: number }> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: input.id });\n\t\tif (!role) throw new NotFoundException(`Role with ID ${input.id} not found`);\n\t\tif (input.name.toUpperCase() !== input.name) throw new BadRequestException('Role name must be uppercase');\n\n\t\trole.name = input.name;\n\t\trole.permissions = input.permissions;\n\t\trole.expires = input.expires;\n\t\tawait this.orm.em.persistAndFlush(role);\n\n\t\tawait role.users.init();\n\t\treturn { ...role, users: role.users.count() };\n\t}\n\n\t@UseRequestContext()\n\tasync getUsers(id: number): Promise<BaseUserResponseDTO[]> {\n\t\tconst role = await this.orm.em.findOne(Role, { id });\n\t\tif (!role) throw new NotFoundException(`Role with ID ${id} not found`);\n\n\t\tawait role.users.init();\n\n\t\tconst res: BaseUserResponseDTO[] = [];\n\t\tfor (const user of role.users) {\n\t\t\tres.push({\n\t\t\t\tid: user.id,\n\t\t\t\tupdated_at: user.updated_at,\n\t\t\t\tcreated_at: user.created_at,\n\t\t\t\tfirst_name: user.first_name,\n\t\t\t\tlast_name: user.last_name,\n\t\t\t\tnickname: user.nickname,\n\t\t\t});\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t@UseRequestContext()\n\tasync addUser(role_id: number, user_id: number): Promise<BaseUserResponseDTO[]> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException(`Role with ID ${role_id} not found`);\n\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException(`User with ID ${user_id} not found`);\n\n\t\tawait role.users.init();\n\t\trole.users.add(user);\n\t\tawait this.orm.em.persistAndFlush([role, user]);\n\n\t\tconst res: BaseUserResponseDTO[] = [];\n\t\trole.users.getItems().forEach((user) =>\n\t\t\tres.push({\n\t\t\t\tid: user.id,\n\t\t\t\tupdated_at: user.updated_at,\n\t\t\t\tcreated_at: user.created_at,\n\t\t\t\tfirst_name: user.first_name,\n\t\t\t\tlast_name: user.last_name,\n\t\t\t\tnickname: user.nickname,\n\t\t\t}),\n\t\t);\n\n\t\treturn res;\n\t}\n\n\t@UseRequestContext()\n\tasync removeUser(role_id: number, user_id: number): Promise<BaseUserResponseDTO[]> {\n\t\tconst role = await this.orm.em.findOne(Role, { id: role_id });\n\t\tif (!role) throw new NotFoundException(`Role with ID ${role_id} not found`);\n\n\t\tconst user = await this.orm.em.findOne(User, { id: user_id });\n\t\tif (!user) throw new NotFoundException(`User with ID ${user_id} not found`);\n\n\t\tawait role.users.init();\n\t\trole.users.remove(user);\n\t\tawait this.orm.em.persistAndFlush([role, user]);\n\n\t\tconst res: BaseUserResponseDTO[] = [];\n\t\trole.users.getItems().forEach((user) =>\n\t\t\tres.push({\n\t\t\t\tid: user.id,\n\t\t\t\tupdated_at: user.updated_at,\n\t\t\t\tcreated_at: user.created_at,\n\t\t\t\tfirst_name: user.first_name,\n\t\t\t\tlast_name: user.last_name,\n\t\t\t\tnickname: user.nickname,\n\t\t\t}),\n\t\t);\n\n\t\treturn res;\n\t}\n}\n","resolvedModuleNames":["/Users/juknum/Documents/Code/AE/api/src/types/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/dto/base-user.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/perms.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/patch.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/entities/role.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/types/discord.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/dto/base-response.dto.ts","/Users/juknum/Documents/Code/AE/api/src/modules/_mixin/entities/base.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/logs/entities/log.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/permissions/entities/permission.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/promotions/entities/promotion.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/subscription/entities/subscription.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-banner.entity.ts","/Users/juknum/Documents/Code/AE/api/src/modules/users/entities/user-picture.entity.ts","/Users/juknum/Documents/Code/AE/api/src/types/api/permissions/index.d.ts","/Users/juknum/Documents/Code/AE/api/src/modules/roles/dto/post.dto.ts"]}]]